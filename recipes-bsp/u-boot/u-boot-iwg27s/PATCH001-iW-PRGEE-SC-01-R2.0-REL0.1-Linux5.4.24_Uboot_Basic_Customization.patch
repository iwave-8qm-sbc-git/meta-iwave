diff -Naur A/arch/arm/dts/fsl-imx8qm-iwg27s.dts B/arch/arm/dts/fsl-imx8qm-iwg27s.dts
--- A/arch/arm/dts/fsl-imx8qm-iwg27s.dts	1970-01-01 05:30:00.000000000 +0530
+++ B/arch/arm/dts/fsl-imx8qm-iwg27s.dts	2020-09-16 17:48:58.121084243 +0530
@@ -0,0 +1,487 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020 iWave System Technologies Pvt Ltd.
+ * Copyright 2020 
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/dts-v1/;
+
+#include "fsl-imx8qm.dtsi"
+
+/ {
+	model = "iW-RainboW-G27S-i.MX8QM/QP-SBC";
+	compatible = "fsl,imx8qm-iwg27s", "fsl,imx8qm";
+
+	chosen {
+		bootargs = "console=ttyLP4,115200 earlycon";
+		stdout-path = &lpuart4;
+	};
+
+	unused_gpios: unused_gpios { /* GPIO: Setting unused GPIOs as input pins */
+		compatible = "iwave,unused-gpios";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_unused_gpio>;
+		status= "okay";
+	};
+
+	regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		reg_usb_otg1_vbus: regulator@0 { /* USB: USB OTG 5V VBUS Regulator */
+			compatible = "regulator-fixed";
+			reg = <0>;
+			regulator-name = "VBUS_USBOTG_5V";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			gpio = <&gpio4 3 GPIO_ACTIVE_HIGH>;
+			enable-active-high;
+		};
+
+		reg_usdhc2_vmmc: usdhc2_vmmc { /* USDHC2: 3.3V VDD Regulator Enable */
+			compatible = "regulator-fixed";
+			regulator-name = "VDD_USDHC2_3.3V";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+		};
+
+		reg_3p3v: 3p3v { /* Regulator: Fixed 3.3V Regulator */
+			compatible = "regulator-fixed";
+			regulator-name = "3P3V";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+		};
+	};
+};
+
+&iomuxc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hog>;
+
+	imx8qm-iwg27s {
+		pinctrl_hog: hoggrp { /* SDHC VSELECT Pin Configuration */
+			fsl,pins = <
+				SC_P_USDHC1_VSELECT_CONN_USDHC1_VSELECT			0x00000021
+				SC_P_USDHC2_VSELECT_CONN_USDHC2_VSELECT			0x00000021
+			>;
+		};
+
+		pinctrl_fec1: fec1grp { /* Ethernet0: IOMUX Pin Configuration */
+			fsl,pins = <
+				SC_P_COMP_CTL_GPIO_1V8_3V3_ENET_ENETB_PAD		0x000014a0
+				SC_P_ENET0_MDC_CONN_ENET0_MDC				0x06000020
+				SC_P_ENET0_MDIO_CONN_ENET0_MDIO				0x06000020
+				SC_P_ENET0_RGMII_TX_CTL_CONN_ENET0_RGMII_TX_CTL		0x00000061
+				SC_P_ENET0_RGMII_TXC_CONN_ENET0_RGMII_TXC		0x00000061
+				SC_P_ENET0_RGMII_TXD0_CONN_ENET0_RGMII_TXD0		0x00000061
+				SC_P_ENET0_RGMII_TXD1_CONN_ENET0_RGMII_TXD1		0x00000061
+				SC_P_ENET0_RGMII_TXD2_CONN_ENET0_RGMII_TXD2		0x00000061
+				SC_P_ENET0_RGMII_TXD3_CONN_ENET0_RGMII_TXD3		0x00000061
+				SC_P_ENET0_RGMII_RXC_CONN_ENET0_RGMII_RXC		0x00000061
+				SC_P_ENET0_RGMII_RX_CTL_CONN_ENET0_RGMII_RX_CTL		0x00000061
+				SC_P_ENET0_RGMII_RXD0_CONN_ENET0_RGMII_RXD0		0x00000061
+				SC_P_ENET0_RGMII_RXD1_CONN_ENET0_RGMII_RXD1		0x00000061
+				SC_P_ENET0_RGMII_RXD2_CONN_ENET0_RGMII_RXD2		0x00000061
+				SC_P_ENET0_RGMII_RXD3_CONN_ENET0_RGMII_RXD3		0x00000061
+				SC_P_ENET0_REFCLK_125M_25M_CONN_ENET0_REFCLK_125M_25M	0x06000048
+				SC_P_PCIE_CTRL1_WAKE_B_LSIO_GPIO4_IO31			0x00000021 /* Ethernet0 Reset */
+				SC_P_PCIE_CTRL1_CLKREQ_B_LSIO_GPIO4_IO30		0x00000021 /* Ethernet0 Wake on LAN */
+				SC_P_PCIE_CTRL0_CLKREQ_B_LSIO_GPIO4_IO27		0x00000021 /* Ethernet0 Interrupt */             
+			>;
+		};
+
+		pinctrl_fec2: fec2grp { /* Ethernet1: IOMUX Pin Configuration */
+			fsl,pins = <
+				SC_P_COMP_CTL_GPIO_1V8_3V3_ENET_ENETA_PAD		0x000014a0
+				SC_P_ENET1_MDC_CONN_ENET1_MDC				0x06000020
+				SC_P_ENET1_MDIO_CONN_ENET1_MDIO				0x06000020
+				SC_P_ENET1_RGMII_TX_CTL_CONN_ENET1_RGMII_TX_CTL		0x00000060
+				SC_P_ENET1_RGMII_TXC_CONN_ENET1_RGMII_TXC		0x00000060
+				SC_P_ENET1_RGMII_TXD0_CONN_ENET1_RGMII_TXD0		0x00000060
+				SC_P_ENET1_RGMII_TXD1_CONN_ENET1_RGMII_TXD1		0x00000060
+				SC_P_ENET1_RGMII_TXD2_CONN_ENET1_RGMII_TXD2		0x00000060
+				SC_P_ENET1_RGMII_TXD3_CONN_ENET1_RGMII_TXD3		0x00000060
+				SC_P_ENET1_RGMII_RXC_CONN_ENET1_RGMII_RXC		0x00000060
+				SC_P_ENET1_RGMII_RX_CTL_CONN_ENET1_RGMII_RX_CTL		0x00000060
+				SC_P_ENET1_RGMII_RXD0_CONN_ENET1_RGMII_RXD0		0x00000060
+				SC_P_ENET1_RGMII_RXD1_CONN_ENET1_RGMII_RXD1		0x00000060
+				SC_P_ENET1_RGMII_RXD2_CONN_ENET1_RGMII_RXD2		0x00000060
+				SC_P_ENET1_RGMII_RXD3_CONN_ENET1_RGMII_RXD3		0x00000060
+				SC_P_ENET1_REFCLK_125M_25M_CONN_ENET1_REFCLK_125M_25M	0x06000048
+				SC_P_MIPI_DSI1_I2C0_SCL_LSIO_GPIO1_IO20			0x00000021 /* Ethernet1 Reset */
+				SC_P_MIPI_DSI0_I2C0_SCL_LSIO_GPIO1_IO16			0x00000021 /* Ethernet1 Wake on LAN */
+				SC_P_MIPI_DSI0_I2C0_SDA_LSIO_GPIO1_IO17			0x00000021 /* Ethernet1 Interrupt */
+			>;
+		};
+
+		pinctrl_lpuart4: lpuart4grp { /* LPUART4: Debug UART IOMUX Pin Configuration */
+			fsl,pins = <
+				SC_P_M40_GPIO0_00_DMA_UART4_RX				0x06000020
+				SC_P_M40_GPIO0_01_DMA_UART4_TX				0x06000020
+			>;
+		};
+
+		pinctrl_pciea: pcieagrp{ /* PCIE: IOMUX Pin Configuration */
+			fsl,pins = <
+				SC_P_SIM0_POWER_EN_LSIO_GPIO0_IO04			0x06000021 /* PCIE W_DISABLE GPIO */
+				SC_P_PCIE_CTRL0_WAKE_B_LSIO_GPIO4_IO28			0x06000021 /* PCIE Wake GPIO */
+				SC_P_PCIE_CTRL0_PERST_B_LSIO_GPIO4_IO29			0x06000021 /* PCIE Reset GPIO */
+			>;
+		};
+
+		pinctrl_usbotg1: usbotg1grp { /* USB: USB OTG IOMUX Pin Configuration */
+			fsl,pins = <
+				SC_P_USB_SS3_TC0_LSIO_GPIO4_IO03			0x06000021 /* USB OTG Power */
+			>;
+		};
+
+		pinctrl_usbotg3: usbotg3grp { /* USB: USB Hub IOMUX Pin COnfiguration */
+			fsl,pins = <
+				SC_P_MIPI_DSI1_I2C0_SDA_LSIO_GPIO1_IO21			0x00000021 /* USB Hub Reset */
+			>;
+		};
+
+		pinctrl_usdhc1: usdhc1grp { /* EMMC: IOMUX Pin Configuration */
+			fsl,pins = <
+				SC_P_EMMC0_CLK_CONN_EMMC0_CLK				0x06000041
+				SC_P_EMMC0_CMD_CONN_EMMC0_CMD				0x00000021
+				SC_P_EMMC0_DATA0_CONN_EMMC0_DATA0			0x00000021
+				SC_P_EMMC0_DATA1_CONN_EMMC0_DATA1			0x00000021
+				SC_P_EMMC0_DATA2_CONN_EMMC0_DATA2			0x00000021
+				SC_P_EMMC0_DATA3_CONN_EMMC0_DATA3			0x00000021
+				SC_P_EMMC0_DATA4_CONN_EMMC0_DATA4			0x00000021
+				SC_P_EMMC0_DATA5_CONN_EMMC0_DATA5			0x00000021
+				SC_P_EMMC0_DATA6_CONN_EMMC0_DATA6			0x00000021
+				SC_P_EMMC0_DATA7_CONN_EMMC0_DATA7			0x00000021
+				SC_P_EMMC0_STROBE_CONN_EMMC0_STROBE			0x00000041
+				SC_P_EMMC0_RESET_B_CONN_EMMC0_RESET_B			0x00000021
+			>;
+		};
+
+		pinctrl_usdhc2_gpio: usdhc2grpgpio { /* USDHC2: IOMUX Pin Configuration */
+			fsl,pins = <
+				SC_P_MIPI_DSI1_GPIO0_01_LSIO_GPIO1_IO23			0x00000021 /* Micro SD Card Detect */
+			>;
+		};
+
+		pinctrl_usdhc2: usdhc2grp {
+			fsl,pins = <
+				SC_P_USDHC1_CLK_CONN_USDHC1_CLK				0x06000041
+				SC_P_USDHC1_CMD_CONN_USDHC1_CMD				0x00000021
+				SC_P_USDHC1_DATA0_CONN_USDHC1_DATA0			0x00000021
+				SC_P_USDHC1_DATA1_CONN_USDHC1_DATA1			0x00000021
+				SC_P_USDHC1_DATA2_CONN_USDHC1_DATA2			0x00000021
+				SC_P_USDHC1_DATA3_CONN_USDHC1_DATA3			0x00000021
+			>;
+		};
+
+		pinctrl_board_cfg: board_cfg { /* SoC Board Settings: IOMUX Pin Configuration */
+			fsl,pins= <
+				SC_P_LVDS0_GPIO01_LSIO_GPIO1_IO05			0x00000021 /* Board Config 0 */
+				SC_P_ESAI1_SCKR_LSIO_GPIO2_IO06				0x00000021 /* Board Config 1 */
+				SC_P_ESAI1_TX2_RX3_LSIO_GPIO2_IO10			0x00000021 /* Board Config 2 */
+				SC_P_LVDS1_GPIO01_LSIO_GPIO1_IO11			0x00000021 /* Board Config 3 */
+				SC_P_ESAI1_TX3_RX2_LSIO_GPIO2_IO11			0x00000021 /* Board Config 4 */
+				SC_P_ESAI1_TX4_RX1_LSIO_GPIO2_IO12			0x00000021 /* Board Config 5 */
+				SC_P_ESAI1_TX5_RX0_LSIO_GPIO2_IO13			0x00000021 /* Board Config 6 */
+			>;
+		};
+
+		pinctrl_unused_gpio: unused_gpiogrp{ /* GPIO: Unused GPIO IOMUX Pin Configuration */
+			fsl,pins = <
+				SC_P_SIM0_CLK_LSIO_GPIO0_IO00				0x00000021
+				SC_P_SIM0_RST_LSIO_GPIO0_IO01				0x00000021
+				SC_P_SIM0_IO_LSIO_GPIO0_IO02				0x00000021
+				SC_P_SIM0_GPIO0_00_LSIO_GPIO0_IO05			0x00000021
+				SC_P_LVDS0_GPIO00_LSIO_GPIO1_IO04			0x00000021
+				SC_P_LVDS0_I2C1_SCL_LSIO_GPIO1_IO08			0x00000021
+				SC_P_LVDS0_I2C1_SDA_LSIO_GPIO1_IO09			0x00000021
+				SC_P_LVDS1_GPIO00_LSIO_GPIO1_IO10			0x00000021
+				SC_P_LVDS1_I2C0_SCL_LSIO_GPIO1_IO12			0x00000021
+				SC_P_LVDS1_I2C0_SDA_LSIO_GPIO1_IO13			0x00000021
+				SC_P_LVDS1_I2C1_SCL_LSIO_GPIO1_IO14			0x00000021
+				SC_P_LVDS1_I2C1_SDA_LSIO_GPIO1_IO15			0x00000021
+				SC_P_MIPI_DSI0_GPIO0_01_LSIO_GPIO1_IO19			0x00000021
+				SC_P_MIPI_DSI1_GPIO0_00_LSIO_GPIO1_IO22			0x00000021
+				SC_P_MIPI_CSI0_MCLK_OUT_LSIO_GPIO1_IO24			0x00000021
+				SC_P_MIPI_CSI0_I2C0_SCL_LSIO_GPIO1_IO25 		0x00000021
+				SC_P_MIPI_CSI0_I2C0_SDA_LSIO_GPIO1_IO26			0x00000021
+				SC_P_MIPI_CSI0_GPIO0_01_LSIO_GPIO1_IO28			0x00000021
+				SC_P_MIPI_CSI1_MCLK_OUT_LSIO_GPIO1_IO29			0x00000021	
+				SC_P_MIPI_CSI1_I2C0_SCL_LSIO_GPIO2_IO00			0x00000021
+				SC_P_MIPI_CSI1_I2C0_SDA_LSIO_GPIO2_IO01			0x00000021
+				SC_P_ESAI1_SCKT_LSIO_GPIO2_IO07				0x00000021
+				SC_P_ESAI1_TX0_LSIO_GPIO2_IO08				0x00000021
+				SC_P_ESAI1_TX1_LSIO_GPIO2_IO09				0x00000021
+				SC_P_SPDIF0_RX_LSIO_GPIO2_IO14				0x00000021
+				SC_P_SPDIF0_TX_LSIO_GPIO2_IO15				0x00000021
+				SC_P_SPDIF0_EXT_CLK_LSIO_GPIO2_IO16			0x00000021
+				SC_P_SPI3_SCK_LSIO_GPIO2_IO17				0x00000021
+				SC_P_SPI3_SDO_LSIO_GPIO2_IO18				0x00000021
+				SC_P_SPI3_SDI_LSIO_GPIO2_IO19				0x00000021
+				SC_P_SPI3_CS0_LSIO_GPIO2_IO20				0x00000021
+				SC_P_SPI3_CS1_LSIO_GPIO2_IO21				0x00000021
+				SC_P_SPI0_SDO_LSIO_GPIO3_IO03				0x00000021
+				SC_P_SPI0_SDI_LSIO_GPIO3_IO04				0x00000021
+				SC_P_SPI0_CS1_LSIO_GPIO3_IO06				0x00000021
+				SC_P_SPI2_SCK_LSIO_GPIO3_IO07				0x00000021
+				SC_P_SPI2_SDO_LSIO_GPIO3_IO08				0x00000021
+				SC_P_SPI2_SDI_LSIO_GPIO3_IO09				0x00000021
+				SC_P_SPI2_CS0_LSIO_GPIO3_IO10				0x00000021
+				SC_P_SPI2_CS1_LSIO_GPIO3_IO11				0x00000021
+				SC_P_ADC_IN7_LSIO_GPIO3_IO25				0x00000021
+				SC_P_FLEXCAN1_RX_LSIO_GPIO3_IO31			0x00000021
+				SC_P_FLEXCAN1_TX_LSIO_GPIO4_IO00			0x00000021	
+				SC_P_FLEXCAN2_RX_LSIO_GPIO4_IO01			0x00000021
+				SC_P_FLEXCAN2_TX_LSIO_GPIO4_IO02			0x00000021
+				SC_P_QSPI1A_SS0_B_LSIO_GPIO4_IO19			0x00000021
+				SC_P_QSPI1A_SS1_B_LSIO_GPIO4_IO20			0x00000021
+				SC_P_QSPI1A_SCLK_LSIO_GPIO4_IO21			0x00000021
+				SC_P_QSPI1A_DQS_LSIO_GPIO4_IO22				0x00000021
+				SC_P_QSPI1A_DATA3_LSIO_GPIO4_IO23			0x00000021
+				SC_P_QSPI1A_DATA2_LSIO_GPIO4_IO24			0x00000021
+				SC_P_QSPI1A_DATA1_LSIO_GPIO4_IO25			0x00000021
+				SC_P_QSPI1A_DATA0_LSIO_GPIO4_IO26			0x00000021
+				SC_P_USB_HSIC0_DATA_LSIO_GPIO5_IO01			0x00000021
+				SC_P_USB_HSIC0_STROBE_LSIO_GPIO5_IO02			0x00000021
+			>;
+		};
+	};
+};
+
+/* General Purpose I/O */
+&gpio0 {
+	status = "okay";
+};
+
+&gpio1 {
+	status = "okay";
+};
+
+&gpio2 {
+	status = "okay";
+};
+
+&gpio3 {
+	status = "okay";
+};
+
+&gpio4 {
+	status = "okay";
+};
+
+&gpio5 {
+	status = "okay";
+};
+
+&usbotg1 { /* USBOTG1: USB 2.0 OTG Device */
+	vbus-supply = <&reg_usb_otg1_vbus>;
+	srp-disable;
+	hnp-disable;
+	adp-disable;
+	disable-over-current;
+	dr_mode = "otg";
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usbotg1>;
+	status = "okay";
+};
+
+&usbotg3 { /* USB2: USB Host */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usbotg3>;
+	status = "okay";
+};
+
+&usdhc1 { /* USDHC1: EMMC */
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc1>;
+	pinctrl-1 = <&pinctrl_usdhc1>;
+	pinctrl-2 = <&pinctrl_usdhc1>;
+	bus-width = <8>;
+	non-removable;
+	status = "okay";
+};
+
+&usdhc2 { /* USDHC2: Standard SD */
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc2>, <&pinctrl_usdhc2_gpio>;
+	pinctrl-1 = <&pinctrl_usdhc2>, <&pinctrl_usdhc2_gpio>;
+	pinctrl-2 = <&pinctrl_usdhc2>, <&pinctrl_usdhc2_gpio>;
+	bus-width = <4>;
+	no-1-8-v;
+	cd-gpios = <&gpio1 23 GPIO_ACTIVE_LOW>;
+	vmmc-supply = <&reg_usdhc2_vmmc>;
+	status = "okay";
+};
+
+&fec1 { /* FEC1: AR8031 PHY ENET 0 */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_fec1>;
+	phy-mode = "rgmii-txid";
+	phy-handle = <&ethphy0>;
+	fsl,magic-packet;
+	fsl,rgmii_rxc_dly;
+	status = "okay";
+
+	mdio {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ethphy0: ethernet-phy@0 {
+			compatible = "ethernet-phy-ieee802.3-c22";
+			reg = <4>;
+			at803x,eee-disabled;
+			at803x,vddio-1p8v;
+		};
+	};
+};
+
+&fec2 { /* FEC2: AR8031 PHY ENET 1 */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_fec2>;
+	phy-mode = "rgmii";
+	phy-handle = <&ethphy1>;
+	fsl,ar8031-phy-fixup;
+	fsl,magic-packet;
+	status = "okay";
+
+	mdio {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ethphy1: ethernet-phy@1 {
+			compatible = "ethernet-phy-ieee802.3-c22";
+			reg = <5>;
+			at803x,eee-disabled;
+			at803x,vddio-1p8v;
+		};
+	};
+};
+
+&lpuart4 { /* LPUART4: Debug console */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_lpuart4>;
+	status = "okay";
+};
+
+&pciea{ /* PCIE: PCIEA SATA */
+	ext_osc = <1>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pciea>;
+	reset-gpio = <&gpio4 29 GPIO_ACTIVE_LOW>;
+	epdev_on = <&reg_3p3v>;
+	status = "okay";
+};
+
+&pcieb{ /* PCIE:  PCIEB SATA */
+	ext_osc = <1>;
+	status = "okay";
+};
+
+&sata {
+	status = "okay";
+};
+
+&tsens {
+	tsens-num = <6>;
+};
+
+&thermal_zones {
+	pmic-thermal0 {
+		polling-delay-passive = <250>;
+		polling-delay = <2000>;
+		thermal-sensors = <&tsens 5>;
+		trips {
+			pmic_alert0: trip0 {
+				temperature = <110000>;
+				hysteresis = <2000>;
+				type = "passive";
+			};
+			pmic_crit0: trip1 {
+				temperature = <125000>;
+				hysteresis = <2000>;
+				type = "critical";
+			};
+		};
+		cooling-maps {
+			map0 {
+				trip = <&pmic_alert0>;
+				cooling-device =
+				<&A53_0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+			};
+			map1 {
+				trip = <&pmic_alert0>;
+				cooling-device =
+				<&A72_0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+			};
+		};
+	};
+};
+
+&unused_gpios { /* GPIO: iWave Unused GPIO pins */
+	gpios = <&gpio0 0 0>, 
+		<&gpio0 1 0>,
+		<&gpio0 2 0>,
+		<&gpio0 5 0>,
+		<&gpio1 4 0>,
+		<&gpio1 8 0>,
+		<&gpio1 9 0>,
+		<&gpio1 10 0>,
+		<&gpio1 12 0>,
+		<&gpio1 13 0>,
+		<&gpio1 14 0>,
+		<&gpio1 15 0>,
+		<&gpio1 19 0>,
+		<&gpio1 22 0>,
+		<&gpio1 24 0>,
+		<&gpio1 25 0>,
+		<&gpio1 26 0>,
+		<&gpio1 28 0>,
+		<&gpio1 29 0>,
+		<&gpio2 0 0>,
+		<&gpio2 1 0>,
+		<&gpio2 7 0>,
+		<&gpio2 8 0>,
+		<&gpio2 9 0>,
+		<&gpio2 14 0>,
+		<&gpio2 15 0>,
+		<&gpio2 16 0>,
+		<&gpio2 17 0>,
+		<&gpio2 18 0>,
+		<&gpio2 19 0>,
+		<&gpio2 20 0>,
+		<&gpio2 21 0>,
+		<&gpio3 3 0>,
+		<&gpio3 4 0>,
+		<&gpio3 6 0>,
+		<&gpio3 7 0>,
+		<&gpio3 8 0>,
+		<&gpio3 9 0>,
+		<&gpio3 10 0>,
+		<&gpio3 25 0>,
+		<&gpio3 31 0>,
+		<&gpio4 0 0>,
+		<&gpio4 1 0>,
+		<&gpio4 2 0>,
+		<&gpio4 19 0>,	
+		<&gpio4 20 0>,
+		<&gpio4 21 0>,
+		<&gpio4 22 0>,
+		<&gpio4 23 0>,
+		<&gpio4 24 0>,
+		<&gpio4 25 0>,
+		<&gpio4 26 0>,
+		<&gpio5 1 0>,
+		<&gpio5 2 0>;
+};
diff -Naur A/arch/arm/dts/fsl-imx8qm-iwg27s-u-boot.dtsi B/arch/arm/dts/fsl-imx8qm-iwg27s-u-boot.dtsi
--- A/arch/arm/dts/fsl-imx8qm-iwg27s-u-boot.dtsi	1970-01-01 05:30:00.000000000 +0530
+++ B/arch/arm/dts/fsl-imx8qm-iwg27s-u-boot.dtsi	2020-09-16 18:05:16.214069704 +0530
@@ -0,0 +1,234 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020 iWave System Technologies Pvt Ltd.
+ */
+
+/ {
+	aliases {
+		usbhost1 = &usbh3;
+		usbgadget0 = &usbg1;
+	};
+
+	usbh3: usbh3 {
+		compatible = "Cadence,usb3-host";
+		dr_mode = "host";
+		cdns3,usb = <&usbotg3>;
+		status = "okay";
+	};
+
+	usbg1: usbg1 {
+		compatible = "fsl,imx27-usb-gadget";
+		dr_mode = "peripheral";
+		chipidea,usb = <&usbotg1>;
+		status = "okay";
+		u-boot,dm-spl;
+	};
+};
+
+&{/imx8qm-pm} {
+
+	u-boot,dm-spl;
+};
+
+&mu {
+	u-boot,dm-spl;
+};
+
+&clk {
+	u-boot,dm-spl;
+};
+
+&iomuxc {
+	u-boot,dm-spl;
+};
+
+&{/regulators} {
+	u-boot,dm-spl;
+};
+
+&reg_usb_otg1_vbus {
+	u-boot,dm-spl;
+};
+
+&reg_usdhc2_vmmc {
+	u-boot,dm-spl;
+};
+
+&reg_3p3v {
+	u-boot,dm-spl;
+};
+
+&{/mu@5d1c0000/iomuxc/imx8qm-iwg27s} {
+	u-boot,dm-spl;
+};
+
+&pinctrl_usdhc2_gpio {
+	u-boot,dm-spl;
+};
+
+&pinctrl_usdhc2 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_lpuart4 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_usdhc1 {
+	u-boot,dm-spl;
+};
+
+&pd_lsio {
+	u-boot,dm-spl;
+};
+
+&pd_lsio_gpio0 {
+	u-boot,dm-spl;
+};
+
+&pd_lsio_gpio1 {
+	u-boot,dm-spl;
+};
+
+&pd_lsio_gpio2 {
+	u-boot,dm-spl;
+};
+
+&pd_lsio_gpio3 {
+	u-boot,dm-spl;
+};
+
+&pd_lsio_gpio4 {
+	u-boot,dm-spl;
+};
+
+&pd_lsio_gpio5 {
+	u-boot,dm-spl;
+};
+
+&pd_lsio_flexspi0 {
+	u-boot,dm-spl;
+};
+
+&pd_conn {
+	u-boot,dm-spl;
+};
+
+&pd_conn_sdch0 {
+	u-boot,dm-spl;
+};
+
+&pd_conn_sdch1 {
+	u-boot,dm-spl;
+};
+
+&pd_conn_sdch2 {
+	u-boot,dm-spl;
+};
+
+&pd_dma {
+	u-boot,dm-spl;
+};
+
+&pd_dma_lpuart4 {
+	u-boot,dm-spl;
+};
+
+&pd_conn_usbotg0 {
+	u-boot,dm-spl;
+};
+
+&pd_conn_usbotg0_phy {
+	u-boot,dm-spl;
+};
+
+&pd_conn_usb2 {
+	u-boot,dm-spl;
+};
+
+&pd_conn_usb2_phy {
+	u-boot,dm-spl;
+};
+
+&gpio0 {
+	u-boot,dm-spl;
+};
+
+&gpio1 {
+	u-boot,dm-spl;
+};
+
+&gpio2 {
+	u-boot,dm-spl;
+};
+
+&gpio3 {
+	u-boot,dm-spl;
+};
+
+&gpio4 {
+	u-boot,dm-spl;
+};
+
+&gpio5 {
+	u-boot,dm-spl;
+};
+
+&lpuart4 {
+	u-boot,dm-spl;
+};
+
+&usbmisc1 {
+	u-boot,dm-spl;
+};
+
+&usbphy1 {
+	u-boot,dm-spl;
+};
+
+&usbotg1 {
+	u-boot,dm-spl;
+};
+
+&usbotg3 {
+	phys = <&usbphynop1>;
+	u-boot,dm-spl;
+};
+
+&usbphynop1 {
+	compatible = "cdns,usb3-phy";
+	reg = <0x0 0x5B160000 0x0 0x40000>;
+	#phy-cells = <0>;
+	u-boot,dm-spl;
+};
+
+&usdhc1 {
+	u-boot,dm-spl;
+	mmc-hs400-1_8v;
+};
+
+&usdhc2 {
+	u-boot,dm-spl;
+	sd-uhs-sdr104;
+	sd-uhs-ddr50;
+};
+
+&flexspi0 {
+	u-boot,dm-spl;
+};
+
+&pciea{
+	u-boot,dm-spl;
+};
+
+&pcieb{
+	u-boot,dm-spl;
+};
+
+&sata {
+	u-boot,dm-spl;
+};
+
+&wu {
+	u-boot,dm-spl;
+};
diff -Naur A/arch/arm/dts/Makefile B/arch/arm/dts/Makefile
--- A/arch/arm/dts/Makefile	2020-09-16 12:59:33.750509503 +0530
+++ B/arch/arm/dts/Makefile	2020-09-16 17:48:58.121084243 +0530
@@ -766,6 +766,7 @@
 	fsl-imx8qm-mek-auto.dtb \
 	fsl-imx8qm-mek-auto2.dtb \
 	imx8qm-rom7720-a1.dtb \
+	fsl-imx8qm-iwg27s.dtb \
 	fsl-imx8qxp-ai_ml.dtb \
 	fsl-imx8qxp-colibri.dtb \
 	fsl-imx8qxp-mek.dtb \
diff -Naur A/arch/arm/include/asm/arch-imx/cpu.h B/arch/arm/include/asm/arch-imx/cpu.h
--- A/arch/arm/include/asm/arch-imx/cpu.h	2020-09-16 12:59:34.286522889 +0530
+++ B/arch/arm/include/asm/arch-imx/cpu.h	2020-09-16 17:48:58.141084635 +0530
@@ -50,6 +50,10 @@
 #define MXC_CPU_IMX8QXP_A0	0x90 /* dummy ID */
 #define MXC_CPU_IMX8QM		0x91 /* dummy ID */
 #define MXC_CPU_IMX8QXP		0x92 /* dummy ID */
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+/* IWG27S: CPU: Support for i.MX8QP Variant */
+#define MXC_CPU_IMX8QP          0x93 /* dummy ID */
+#endif
 #define MXC_CPU_IMX8DXL     0x9E /* dummy ID */
 #define MXC_CPU_MX7ULP		0xE1 /* Temporally hard code */
 #define MXC_CPU_VF610		0xF6 /* dummy ID */
diff -Naur A/arch/arm/include/asm/mach-imx/sys_proto.h B/arch/arm/include/asm/mach-imx/sys_proto.h
--- A/arch/arm/include/asm/mach-imx/sys_proto.h	2020-09-16 12:59:34.370524987 +0530
+++ B/arch/arm/include/asm/mach-imx/sys_proto.h	2020-09-16 17:48:58.245086680 +0530
@@ -48,6 +48,10 @@
 #define is_imx8md() (is_cpu_type(MXC_CPU_IMX8MD))
 #define is_imx8mql() (is_cpu_type(MXC_CPU_IMX8MQL))
 #define is_imx8qm() (is_cpu_type(MXC_CPU_IMX8QM))
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+/* IWG27S: CPU: Support for i.MX8QP Variant */
+#define is_imx8qp() (is_cpu_type(MXC_CPU_IMX8QP))
+#endif
 #define is_imx8mm() (is_cpu_type(MXC_CPU_IMX8MM) || is_cpu_type(MXC_CPU_IMX8MML) ||\
 	is_cpu_type(MXC_CPU_IMX8MMD) || is_cpu_type(MXC_CPU_IMX8MMDL) || \
 	is_cpu_type(MXC_CPU_IMX8MMS) || is_cpu_type(MXC_CPU_IMX8MMSL))
diff -Naur A/arch/arm/mach-imx/cmd_nandbcb.c B/arch/arm/mach-imx/cmd_nandbcb.c
--- A/arch/arm/mach-imx/cmd_nandbcb.c	2020-09-16 12:59:34.418526186 +0530
+++ B/arch/arm/mach-imx/cmd_nandbcb.c	2020-09-16 17:48:58.305087860 +0530
@@ -1490,7 +1490,12 @@
 		plat_config = imx8mm_plat_config;
 	else if (is_imx8mn())
 		plat_config = imx8mn_plat_config;
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: CPU: Support for i.MX8QP Variant */
+	else if (is_imx8qm() || is_imx8qp() || is_imx8qxp() || is_imx8dxl())
+#else
 	else if (is_imx8qm() || is_imx8qxp() || is_imx8dxl())
+#endif
 		plat_config = imx8q_plat_config;
 	else {
 		printf("ERROR: Unknown platform\n");
diff -Naur A/arch/arm/mach-imx/imx8/clock.c B/arch/arm/mach-imx/imx8/clock.c
--- A/arch/arm/mach-imx/imx8/clock.c	2020-09-16 12:59:34.446526885 +0530
+++ B/arch/arm/mach-imx/imx8/clock.c	2020-09-16 17:48:58.305087860 +0530
@@ -26,7 +26,12 @@
 	switch (clk) {
 	case MXC_UART_CLK:
 		err = sc_pm_get_clock_rate(-1,
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+                                /* IWG27S: LPUART4: Configuring LPUART4 for iWave board */
+                                SC_R_UART_4, 2, &clkrate);
+#else
 				SC_R_UART_0, 2, &clkrate);
+#endif
 		if (err != SC_ERR_NONE) {
 			printf("sc get UART clk failed! err=%d\n", err);
 			return 0;
diff -Naur A/arch/arm/mach-imx/imx8/cpu.c B/arch/arm/mach-imx/imx8/cpu.c
--- A/arch/arm/mach-imx/imx8/cpu.c	2020-09-16 12:59:34.446526885 +0530
+++ B/arch/arm/mach-imx/imx8/cpu.c	2020-09-16 17:48:58.305087860 +0530
@@ -107,7 +107,12 @@
 		}
 	}
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: CPU: Support for i.MX8QP Variant */
+	if (is_imx8qm() || is_imx8qp()) {
+#else
 	if (is_imx8qm()) {
+#endif
 		ret = sc_pm_set_resource_power_mode(-1, SC_R_SMMU,
 						    SC_PM_PW_MODE_ON);
 		if (ret)
@@ -909,13 +914,35 @@
 {
 	u32 id = 0, rev = 0;
 	int ret;
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: CPU: Support for i.MX8QP Variant */
+	uint32_t val = 0;
+#endif
 
 	ret = sc_misc_get_control(-1, SC_R_SYSTEM, SC_C_ID, &id);
 	if (ret)
 		return 0;
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: CPU: Support for i.MX8QP Variant */
+	ret = sc_misc_otp_fuse_read(-1, 0x06, &val);
+	if (ret < 0) {
+		printf("%s: fuse %d, err: %d\n", __func__, val, ret);
+		return 1;
+	}
+#endif
 	rev = (id >> 5)  & 0xf;
+
+/*	printf("val=%x\n",val);*/
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: CPU: Support for i.MX8QP Variant */
+	if(val & 0x20)
+		id = (id & 0x1f) + MXC_SOC_IMX8 + 0x2;/* Dummy ID for chip */
+	else
+		id = (id & 0x1f) + MXC_SOC_IMX8;/* Dummy ID for chip */
+#else
 	id = (id & 0x1f) + MXC_SOC_IMX8;  /* Dummy ID for chip */
+#endif
 
 	return (id << 12) | rev;
 }
diff -Naur A/arch/arm/mach-imx/imx8/fdt.c B/arch/arm/mach-imx/imx8/fdt.c
--- A/arch/arm/mach-imx/imx8/fdt.c	2020-09-16 12:59:34.446526885 +0530
+++ B/arch/arm/mach-imx/imx8/fdt.c	2020-09-16 17:48:58.305087860 +0530
@@ -175,7 +175,12 @@
 	int nodeoff, ret;
 	struct edma_ch_map *edma_array;
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: CPU: Support for i.MX8QP Variant */
+	if (is_imx8qm() || is_imx8qp()) {
+#else
 	if (is_imx8qm()) {
+#endif
 		edma_array = edma_qm;
 		edma_size = ARRAY_SIZE(edma_qm);
 	} else {
@@ -591,7 +596,7 @@
 #endif
 
 	update_fdt_edma_nodes(blob);
-	if (is_imx8qm()) {
+	if (is_imx8qm() || is_imx8qp()) {
 		ret = config_smmu_fdt(blob);
 		if (ret)
 			return ret;
diff -Naur A/arch/arm/mach-imx/imx8/Kconfig B/arch/arm/mach-imx/imx8/Kconfig
--- A/arch/arm/mach-imx/imx8/Kconfig	2020-09-16 12:59:34.446526885 +0530
+++ B/arch/arm/mach-imx/imx8/Kconfig	2020-09-16 17:48:58.305087860 +0530
@@ -79,6 +79,21 @@
 	  This is to specific the cfg file for generating container
 	  image which will be loaded by SPL.
 
+config SDRAM_SIZE_2GB
+	bool "Support 2GB IWG27S"
+	depends on TARGET_IMX8QM_IWG27S
+
+config SDRAM_SIZE_4GB
+	bool "Support 4GB IWG27S"
+	depends on TARGET_IMX8QM_IWG27S
+
+config SDRAM_SIZE_8GB
+	bool "Support 8GB IWG27S"
+	depends on TARGET_IMX8QM_IWG27S
+
+config TARGET_IMX8QM_IWG27S_UUU
+	bool "Support i.MX8QM lpddr4 iwave board uuu"
+
 choice
 	prompt "i.MX8 board select"
 	optional
@@ -103,6 +118,11 @@
 	select BOARD_LATE_INIT
 	select IMX8QXP
 
+config TARGET_IMX8QM_IWG27S
+	bool "Support i.MX8QM lpddr4 iwave board"
+	select BOARD_LATE_INIT
+	select IMX8QM
+
 config TARGET_IMX8QM_MEK
 	bool "Support i.MX8QM MEK board"
 	select BOARD_LATE_INIT
@@ -168,6 +188,7 @@
 endchoice
 
 source "board/freescale/imx8qm_mek/Kconfig"
+source "board/freescale/imx8qm_iwg27s/Kconfig"
 source "board/freescale/imx8qxp_mek/Kconfig"
 source "board/freescale/imx8qm_val/Kconfig"
 source "board/freescale/imx8qxp_val/Kconfig"
diff -Naur A/board/freescale/imx8qm_iwg27s/imx8qm_iwg27s.c B/board/freescale/imx8qm_iwg27s/imx8qm_iwg27s.c
--- A/board/freescale/imx8qm_iwg27s/imx8qm_iwg27s.c	1970-01-01 05:30:00.000000000 +0530
+++ B/board/freescale/imx8qm_iwg27s/imx8qm_iwg27s.c	2020-09-16 17:48:58.965100834 +0530
@@ -0,0 +1,572 @@
+/*
+ * Copyright 2020 iWave System Technologies Pvt Ltd.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <cpu_func.h>
+#include <env.h>
+#include <errno.h>
+#include <init.h>
+#include <linux/libfdt.h>
+#include <fdt_support.h>
+#include <asm/io.h>
+#include <asm/gpio.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/sci/sci.h>
+#include <asm/arch/imx8-pins.h>
+#include <asm/arch/snvs_security_sc.h>
+#include <usb.h>
+#include <asm/arch/iomux.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch/lpcg.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+int bom_rev, pcb_rev;
+
+#define ENET_INPUT_PAD_CTRL	((SC_PAD_CONFIG_OD_IN << PADRING_CONFIG_SHIFT) | (SC_PAD_ISO_OFF << PADRING_LPCONFIG_SHIFT) \
+						| (SC_PAD_28FDSOI_DSE_18V_10MA << PADRING_DSE_SHIFT) | (SC_PAD_28FDSOI_PS_PU << PADRING_PULL_SHIFT))
+
+#define ENET_NORMAL_PAD_CTRL	((SC_PAD_CONFIG_NORMAL << PADRING_CONFIG_SHIFT) | (SC_PAD_ISO_OFF << PADRING_LPCONFIG_SHIFT) \
+						| (SC_PAD_28FDSOI_DSE_18V_10MA << PADRING_DSE_SHIFT) | (SC_PAD_28FDSOI_PS_PU << PADRING_PULL_SHIFT))
+
+
+#define GPIO_PAD_CTRL	((SC_PAD_CONFIG_NORMAL << PADRING_CONFIG_SHIFT) | (SC_PAD_ISO_OFF << PADRING_LPCONFIG_SHIFT) \
+						| (SC_PAD_28FDSOI_DSE_DV_HIGH << PADRING_DSE_SHIFT) | (SC_PAD_28FDSOI_PS_PU << PADRING_PULL_SHIFT))
+
+#define GPIO_PAD_CFG_CTRL	((SC_PAD_CONFIG_NORMAL << PADRING_CONFIG_SHIFT) | (SC_PAD_ISO_OFF << PADRING_LPCONFIG_SHIFT) \
+						| (SC_PAD_28FDSOI_DSE_DV_HIGH << PADRING_DSE_SHIFT) | (SC_PAD_28FDSOI_PS_NONE << PADRING_PULL_SHIFT))
+
+#define UART_PAD_CTRL	((SC_PAD_CONFIG_OUT_IN << PADRING_CONFIG_SHIFT) | (SC_PAD_ISO_OFF << PADRING_LPCONFIG_SHIFT) \
+						| (SC_PAD_28FDSOI_DSE_DV_HIGH << PADRING_DSE_SHIFT) | (SC_PAD_28FDSOI_PS_PU << PADRING_PULL_SHIFT))
+
+static iomux_cfg_t uart4_pads[] = {
+	SC_P_M40_GPIO0_00 | MUX_PAD_CTRL(UART_PAD_CTRL),
+	SC_P_M40_GPIO0_01 | MUX_PAD_CTRL(UART_PAD_CTRL),
+};
+
+static void setup_iomux_uart(void)
+{
+	imx8_iomux_setup_multiple_pads(uart4_pads, ARRAY_SIZE(uart4_pads));
+}
+
+static iomux_cfg_t lcd_rst_pads[] = {
+	SC_P_SIM0_PD | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+};
+
+#define PDN_EN IMX_GPIO_NR(4, 7)
+#define CORE_PDN IMX_GPIO_NR(2, 30)
+
+static iomux_cfg_t wifi_pads[] = {
+	SC_P_USDHC1_RESET_B | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+        SC_P_ESAI0_TX4_RX1  | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+};
+
+static void wifi_pwr_seq(void)
+{
+	struct gpio_desc pdn_en_desc, core_en_desc;
+	int ret;
+
+	imx8_iomux_setup_multiple_pads(wifi_pads, ARRAY_SIZE(wifi_pads));
+
+	ret = dm_gpio_lookup_name("GPIO4_7", &pdn_en_desc);
+	if (ret) {
+		printf("%s lookup GPIO4_7 failed ret = %d\n", __func__, ret);
+		return;
+	}
+
+	ret = dm_gpio_request(&pdn_en_desc, "wifi_pdn_en_gpio");
+	if (ret) {
+		printf("%s request wifi pdn_en_gpio gpio failed ret = %d\n", __func__, ret);
+		return;
+	}
+
+	dm_gpio_set_dir_flags(&pdn_en_desc, GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+
+	ret = dm_gpio_lookup_name("GPIO2_30", &core_en_desc);
+	if (ret) {
+		printf("%s lookup GPIO2_30 failed ret = %d\n", __func__, ret);
+		return;
+	}
+
+	ret = dm_gpio_request(&core_en_desc, "wifi_core_en_gpio");
+	if (ret) {
+		printf("%s request wifi core_en_gpio gpio failed ret = %d\n", __func__, ret);
+		return;
+	}
+
+	dm_gpio_set_dir_flags(&core_en_desc, GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+
+	dm_gpio_set_value(&pdn_en_desc, 1);
+	mdelay(5);
+	dm_gpio_set_value(&core_en_desc, 1);
+}
+
+int board_early_init_f(void)
+{
+	int ret;
+
+	/* When start u-boot in XEN VM, directly return */
+	if (IS_ENABLED(CONFIG_XEN)) {
+		writel(0xF53535F5, (void __iomem *)0x80000000);
+		return 0;
+	}
+
+	/* Set UART4 clock root to 80 MHz */
+	sc_pm_clock_rate_t rate = 80000000;
+
+	/* Power up UART4 */
+	ret = sc_pm_set_resource_power_mode(-1, SC_R_UART_4, SC_PM_PW_MODE_ON);
+	if (ret)
+		return ret;
+
+	ret = sc_pm_set_clock_rate(-1, SC_R_UART_4, 2, &rate);
+	if (ret)
+		return ret;
+
+	/* Enable UART4 clock root */
+	ret = sc_pm_clock_enable(-1, SC_R_UART_4, 2, true, false);
+	if (ret)
+		return ret;
+
+	lpcg_all_clock_on(LPUART_4_LPCG);
+
+	setup_iomux_uart();
+
+/* Dual bootloader feature will require CAAM access, but JR0 and JR1 will be
+ * assigned to seco for imx8, use JR3 instead.
+ */
+#if defined(CONFIG_SPL_BUILD) && defined(CONFIG_DUAL_BOOTLOADER)
+	sc_pm_set_resource_power_mode(-1, SC_R_CAAM_JR3, SC_PM_PW_MODE_ON);
+	sc_pm_set_resource_power_mode(-1, SC_R_CAAM_JR3_OUT, SC_PM_PW_MODE_ON);
+#endif
+
+	return 0;
+}
+
+#if IS_ENABLED(CONFIG_FEC_MXC)
+#include <miiphy.h>
+
+#ifndef CONFIG_DM_ETH
+static iomux_cfg_t pad_enet1[] = {
+	SC_P_ENET1_RGMII_RX_CTL | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET1_RGMII_RXD0 | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET1_RGMII_RXD1 | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET1_RGMII_RXD2 | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET1_RGMII_RXD3 | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET1_RGMII_RXC | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET1_RGMII_TX_CTL | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET1_RGMII_TXD0 | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET1_RGMII_TXD1 | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET1_RGMII_TXD2 | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET1_RGMII_TXD3 | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET1_RGMII_TXC | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET1_REFCLK_125M_25M | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+
+	SC_P_ENET1_MDC | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET1_MDIO | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_MIPI_DSI1_I2C0_SCL | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+        SC_P_MIPI_DSI0_I2C0_SCL | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+        SC_P_MIPI_DSI0_I2C0_SDA | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+};
+
+static iomux_cfg_t pad_enet0[] = {
+	SC_P_ENET0_RGMII_RX_CTL | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET0_RGMII_RXD0 | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET0_RGMII_RXD1 | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET0_RGMII_RXD2 | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET0_RGMII_RXD3 | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET0_RGMII_RXC | MUX_PAD_CTRL(ENET_INPUT_PAD_CTRL),
+	SC_P_ENET0_RGMII_TX_CTL | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET0_RGMII_TXD0 | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET0_RGMII_TXD1 | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET0_RGMII_TXD2 | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET0_RGMII_TXD3 | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET0_RGMII_TXC | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+
+	SC_P_ENET0_MDC | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET0_MDIO | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+	SC_P_ENET0_REFCLK_125M_25M | MUX_PAD_CTRL(ENET_NORMAL_PAD_CTRL),
+        SC_P_PCIE_CTRL1_WAKE_B | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+        SC_P_PCIE_CTRL1_CLKREQ_B | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+        SC_P_PCIE_CTRL0_CLKREQ_B | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+};
+
+static void setup_iomux_fec(void)
+{
+	if (0 == CONFIG_FEC_ENET_DEV)
+		imx8_iomux_setup_multiple_pads(pad_enet0, ARRAY_SIZE(pad_enet0));
+	else
+		imx8_iomux_setup_multiple_pads(pad_enet1, ARRAY_SIZE(pad_enet1));
+}
+
+int board_eth_init(bd_t *bis)
+{
+	int ret;
+	struct power_domain pd;
+
+	printf("[%s] %d\n", __func__, __LINE__);
+
+	if (CONFIG_FEC_ENET_DEV) {
+		if (!power_domain_lookup_name("conn_enet1", &pd))
+			power_domain_on(&pd);
+	} else {
+		if (!power_domain_lookup_name("conn_enet0", &pd))
+			power_domain_on(&pd);
+	}
+
+	setup_iomux_fec();
+
+	ret = fecmxc_initialize_multi(bis, CONFIG_FEC_ENET_DEV,
+		CONFIG_FEC_MXC_PHYADDR, IMX_FEC_BASE);
+	if (ret)
+		printf("FEC1 MXC: %s:failed\n", __func__);
+
+	return ret;
+}
+#endif
+
+int board_phy_config(struct phy_device *phydev)
+{
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1d, 0x1f);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1e, 0x8);
+
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1d, 0x00);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1e, 0x82ee);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1d, 0x05);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x1e, 0x100);
+
+	if (phydev->drv->config)
+		phydev->drv->config(phydev);
+
+	return 0;
+}
+#endif
+
+static iomux_cfg_t otg_pwr_pads[] = {
+	SC_P_USB_SS3_TC0 | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+};
+
+static void usb_otg_pwr_enable(void)
+{
+	struct gpio_desc usb_otg_desc;
+	int ret;
+
+	imx8_iomux_setup_multiple_pads(otg_pwr_pads, ARRAY_SIZE(otg_pwr_pads));
+
+	ret = dm_gpio_lookup_name("GPIO4_3", &usb_otg_desc);
+	if (ret) {
+		printf("%s lookup GPIO4_3 failed ret = %d\n", __func__, ret);
+		return;
+	}
+
+	ret = dm_gpio_request(&usb_otg_desc, "usb_otg_gpio");
+	if (ret) {
+		printf("%s request usb otg gpio failed ret = %d\n", __func__, ret);
+		return;
+	}
+
+	dm_gpio_set_dir_flags(&usb_otg_desc, GPIOD_IS_IN);
+}
+
+static iomux_cfg_t hub_pwr_pads[] = {
+	SC_P_MIPI_DSI1_I2C0_SDA | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+};
+
+static void usb_hub_pwr_enable(void)
+{
+	imx8_iomux_setup_multiple_pads(hub_pwr_pads, ARRAY_SIZE(hub_pwr_pads));
+
+	struct gpio_desc hub_reset_desc;
+	int ret;
+
+	ret = dm_gpio_lookup_name("GPIO1_21", &hub_reset_desc);
+	if (ret) {
+		printf("%s lookup GPIO1_21 failed ret = %d\n", __func__, ret);
+		return;
+	}
+
+	ret = dm_gpio_request(&hub_reset_desc, "hub_reset_gpio");
+	if (ret) {
+		printf("%s request hub_reset gpio failed ret = %d\n", __func__, ret);
+		return;
+	}
+
+	dm_gpio_set_dir_flags(&hub_reset_desc, GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+	dm_gpio_set_value(&hub_reset_desc, 1);
+}
+
+#define BCONFIG_0 IMX_GPIO_NR(1, 5)
+#define BCONFIG_1 IMX_GPIO_NR(2, 6)
+#define BCONFIG_2 IMX_GPIO_NR(2, 10)
+#define BCONFIG_3 IMX_GPIO_NR(1, 11)
+#define BCONFIG_4 IMX_GPIO_NR(2, 11)
+#define BCONFIG_5 IMX_GPIO_NR(2, 12)
+#define BCONFIG_6 IMX_GPIO_NR(2, 13)
+
+int board_config_pads[] = {
+	BCONFIG_0,
+	BCONFIG_1,
+	BCONFIG_2,
+	BCONFIG_3,
+	BCONFIG_4,
+	BCONFIG_5,
+	BCONFIG_6,
+};
+
+static iomux_cfg_t board_cfg[] = {
+	SC_P_LVDS0_GPIO01 | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CFG_CTRL),
+	SC_P_ESAI1_SCKR | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CFG_CTRL),
+	SC_P_ESAI1_TX2_RX3 | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CFG_CTRL),
+	SC_P_LVDS1_GPIO01 | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CFG_CTRL),
+	SC_P_ESAI1_TX3_RX2 | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CFG_CTRL),
+	SC_P_ESAI1_TX4_RX1 | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CFG_CTRL),
+	SC_P_ESAI1_TX5_RX0 | MUX_MODE_ALT(3) | MUX_PAD_CTRL(GPIO_PAD_CFG_CTRL),
+};
+
+void get_board_info(void)
+{
+	int i;
+
+	imx8_iomux_setup_multiple_pads(board_cfg, ARRAY_SIZE(board_cfg));
+
+	for (i=0;i<ARRAY_SIZE(board_config_pads);i++) {
+		if(i<=3) {
+			gpio_request(board_config_pads[i], "SOM-Revision-GPIO");
+			gpio_direction_input(board_config_pads[i]);
+			pcb_rev |= (gpio_get_value(board_config_pads[i]) << i);
+		} else {
+			gpio_request(board_config_pads[i], "SOM-Revision-GPIO");
+			gpio_direction_input(board_config_pads[i]);
+			bom_rev |= (gpio_get_value(board_config_pads[i]) << (i-4));
+		}
+	}
+}
+
+static void print_board_info(void)
+{
+	printf ("\n");
+	printf ("Board Info:\n");
+	printf ("\tBSP Version     : %s\n", BSP_VERSION);
+	printf ("\tSOM Version     : iW-PRGEE-AP-01-R%x.%x\n",bom_rev+1,pcb_rev);
+	printf ("\n");
+}
+
+int checkboard(void)
+{
+	puts("Board: iMX8QM IWG27S\n");
+
+	print_bootinfo();
+
+	return 0;
+}
+
+#ifdef CONFIG_FSL_HSIO
+
+#define PCIE_PAD_CTRL	((SC_PAD_CONFIG_OD_IN << PADRING_CONFIG_SHIFT))
+static iomux_cfg_t board_pcie_pins[] = {
+	SC_P_PCIE_CTRL0_CLKREQ_B | MUX_MODE_ALT(3) | MUX_PAD_CTRL(PCIE_PAD_CTRL),
+	SC_P_PCIE_CTRL0_WAKE_B | MUX_MODE_ALT(3) | MUX_PAD_CTRL(PCIE_PAD_CTRL),
+	SC_P_PCIE_CTRL0_PERST_B | MUX_MODE_ALT(3) | MUX_PAD_CTRL(PCIE_PAD_CTRL),
+};
+
+static void imx8qm_hsio_initialize(void)
+{
+	struct power_domain pd;
+	int ret;
+
+	if (!power_domain_lookup_name("hsio_sata0", &pd)) {
+		ret = power_domain_on(&pd);
+		if (ret)
+			printf("hsio_sata0 Power up failed! (error = %d)\n", ret);
+	}
+
+	if (!power_domain_lookup_name("hsio_pcie0", &pd)) {
+		ret = power_domain_on(&pd);
+		if (ret)
+			printf("hsio_pcie0 Power up failed! (error = %d)\n", ret);
+	}
+
+	if (!power_domain_lookup_name("hsio_pcie1", &pd)) {
+		ret = power_domain_on(&pd);
+		if (ret)
+			printf("hsio_pcie1 Power up failed! (error = %d)\n", ret);
+	}
+
+	if (!power_domain_lookup_name("hsio_gpio", &pd)) {
+		ret = power_domain_on(&pd);
+		if (ret)
+			 printf("hsio_gpio Power up failed! (error = %d)\n", ret);
+	}
+
+	lpcg_all_clock_on(HSIO_PCIE_X2_LPCG);
+	lpcg_all_clock_on(HSIO_PCIE_X1_LPCG);
+	lpcg_all_clock_on(HSIO_PHY_X2_LPCG);
+	lpcg_all_clock_on(HSIO_PHY_X1_LPCG);
+	lpcg_all_clock_on(HSIO_PCIE_X2_CRR2_LPCG);
+	lpcg_all_clock_on(HSIO_PCIE_X1_CRR3_LPCG);
+	lpcg_all_clock_on(HSIO_MISC_LPCG);
+	lpcg_all_clock_on(HSIO_GPIO_LPCG);
+
+	imx8_iomux_setup_multiple_pads(board_pcie_pins, ARRAY_SIZE(board_pcie_pins));
+}
+
+void pci_init_board(void)
+{
+	/* test the 1 lane mode of the PCIe A controller */
+	mx8qm_pcie_init();
+}
+#endif
+
+#ifdef CONFIG_USB
+
+int board_usb_init(int index, enum usb_init_type init)
+{
+	int ret = 0;
+
+	if (index == 1) {
+		if (init == USB_INIT_HOST) {
+#ifdef CONFIG_USB_CDNS3_GADGET
+		} else {
+#endif
+		}
+	}
+
+	return ret;
+
+}
+
+int board_usb_cleanup(int index, enum usb_init_type init)
+{
+	int ret = 0;
+
+	if (index == 1) {
+		if (init == USB_INIT_HOST) {
+		}
+	}
+
+	return ret;
+}
+#endif
+
+void iwg27s_fdt_update(void *fdt)
+{
+	uint32_t reg[2];
+	int ret=0;
+/*IWG27S: CMA: Assigning 640MB CMA value for 2GB memory size */
+#ifdef CONFIG_SDRAM_SIZE_2GB
+        reg[0] = cpu_to_fdt32(0x0);
+        reg[1] = cpu_to_fdt32(0x28000000);
+	ret= fdt_setprop(fdt,fdt_path_offset(fdt, "/reserved-memory/linux,cma"), "size", reg, sizeof(reg));
+	if(ret<0){
+	printf("Kernel FTD CMA update is failed");
+	}
+#endif
+}
+
+int board_init(void)
+{
+
+#ifdef CONFIG_SNVS_SEC_SC_AUTO
+	{
+		int ret = snvs_security_sc_init();
+
+		if (ret)
+			return ret;
+	}
+#endif
+
+	return 0;
+}
+
+void board_quiesce_devices(void)
+{
+	const char *power_on_devices[] = {
+		"dma0_chan21",
+	};
+
+	if (IS_ENABLED(CONFIG_XEN)) {
+		/* Clear magic number to let xen know uboot is over */
+		writel(0x0, (void __iomem *)0x80000000);
+		return;
+	}
+
+	power_off_pd_devices(power_on_devices, ARRAY_SIZE(power_on_devices));
+}
+
+/*
+ * Board specific reset that is system reset.
+ */
+void reset_cpu(ulong addr)
+{
+	sc_pm_reboot(-1, SC_PM_RESET_TYPE_COLD);
+	while(1);
+}
+
+#ifdef CONFIG_OF_BOARD_SETUP
+int ft_board_setup(void *blob, bd_t *bd)
+{
+	return 0;
+}
+#endif
+
+int board_mmc_get_env_dev(int devno)
+{
+	/* Use EMMC */
+	if (IS_ENABLED(CONFIG_XEN))
+		return 0;
+
+	return devno;
+}
+
+int mmc_map_to_kernel_blk(int dev_no)
+{
+	/* Use EMMC */
+	if (IS_ENABLED(CONFIG_XEN))
+		return 0;
+
+	return dev_no;
+}
+
+extern uint32_t _end_ofs;
+int board_late_init(void)
+{
+	print_board_info();
+	/* IWG27S: WIFI: Correcting WIFI Power On Sequence */
+	wifi_pwr_seq();
+	usb_otg_pwr_enable();
+	usb_hub_pwr_enable();
+
+#ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+	env_set("board_name", "iW-RainboW-G27S-i.MX8QM/QP Pico ITX SBC");
+	env_set("board_rev", "iW-PRGEE-AP-01-R1.X");
+#endif
+
+	env_set("sec_boot", "no");
+#ifdef CONFIG_AHAB_BOOT
+	env_set("sec_boot", "yes");
+#endif
+
+	/* IWG27S: Updating iMX8QM/QP FDT file based on CPU */
+	if(is_imx8qp())
+		env_set("fdt_file","imx8qp-iwg27s.dtb");
+	else
+		env_set("fdt_file","imx8qm-iwg27s.dtb");
+
+#ifdef CONFIG_ENV_IS_IN_MMC
+	board_late_mmc_env_init();
+#endif
+
+	return 0;
+}
+
+#ifdef CONFIG_FSL_FASTBOOT
+#ifdef CONFIG_ANDROID_RECOVERY
+int is_recovery_key_pressing(void)
+{
+	return 0; /*TODO*/
+}
+#endif /*CONFIG_ANDROID_RECOVERY*/
+#endif /*CONFIG_FSL_FASTBOOT*/
diff -Naur A/board/freescale/imx8qm_iwg27s/imximage.cfg B/board/freescale/imx8qm_iwg27s/imximage.cfg
--- A/board/freescale/imx8qm_iwg27s/imximage.cfg	1970-01-01 05:30:00.000000000 +0530
+++ B/board/freescale/imx8qm_iwg27s/imximage.cfg	2020-09-16 17:48:58.965100834 +0530
@@ -0,0 +1,19 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2020 iWave System Technologies Pvt Ltd.
+ */
+
+#define __ASSEMBLY__
+
+/* Boot from SD, sector size 0x400 */
+BOOT_FROM SD 0x400
+/* SoC type IMX8QM */
+SOC_TYPE IMX8QM
+/* Append seco container image */
+APPEND mx8qm-ahab-container.img
+/* Create the 2nd container */
+CONTAINER
+/* Add scfw image with exec attribute */
+IMAGE SCU mx8qm-iwg27s-scfw-tcm.bin
+/* Add ATF image with exec attribute */
+IMAGE A35 spl/u-boot-spl.bin 0x00100000
diff -Naur A/board/freescale/imx8qm_iwg27s/Kconfig B/board/freescale/imx8qm_iwg27s/Kconfig
--- A/board/freescale/imx8qm_iwg27s/Kconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/board/freescale/imx8qm_iwg27s/Kconfig	2020-09-16 17:48:58.965100834 +0530
@@ -0,0 +1,27 @@
+if TARGET_IMX8QM_IWG27S_UUU
+
+config SYS_BOARD
+        default "imx8qm_iwg27s"
+
+config SYS_VENDOR
+        default "freescale"
+
+config SYS_CONFIG_NAME
+        default "imx8qm_iwg27s_uuu"
+
+endif
+
+if TARGET_IMX8QM_IWG27S
+
+config SYS_BOARD
+	default "imx8qm_iwg27s"
+
+config SYS_VENDOR
+	default "freescale"
+
+config SYS_CONFIG_NAME
+	default "imx8qm_iwg27s"
+
+source "board/freescale/common/Kconfig"
+
+endif
diff -Naur A/board/freescale/imx8qm_iwg27s/Makefile B/board/freescale/imx8qm_iwg27s/Makefile
--- A/board/freescale/imx8qm_iwg27s/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ B/board/freescale/imx8qm_iwg27s/Makefile	2020-09-16 17:48:58.965100834 +0530
@@ -0,0 +1,8 @@
+#
+# Copyright 2020 iWave System Technologies Pvt Ltd.
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+obj-y += imx8qm_iwg27s.o
+obj-$(CONFIG_SPL_BUILD) += spl.o
diff -Naur A/board/freescale/imx8qm_iwg27s/spl.c B/board/freescale/imx8qm_iwg27s/spl.c
--- A/board/freescale/imx8qm_iwg27s/spl.c	1970-01-01 05:30:00.000000000 +0530
+++ B/board/freescale/imx8qm_iwg27s/spl.c	2020-09-16 17:48:58.965100834 +0530
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2020 iWave System Technologies Pvt Ltd.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <spl.h>
+#include <dm/uclass.h>
+#include <dm/device.h>
+#include <dm/uclass-internal.h>
+#include <dm/device-internal.h>
+#include <dm/lists.h>
+#include <bootm.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+
+void spl_board_init(void)
+{
+	struct udevice *dev;
+
+	uclass_find_first_device(UCLASS_MISC, &dev);
+
+	for (; dev; uclass_find_next_device(&dev)) {
+		if (device_probe(dev))
+			continue;
+	}
+
+	board_early_init_f();
+
+
+	timer_init();
+
+	preloader_console_init();
+
+	puts("Normal Boot\n");
+}
+
+void spl_board_prepare_for_boot(void)
+{
+	board_quiesce_devices();
+}
+
+#ifdef CONFIG_SPL_LOAD_FIT
+int board_fit_config_name_match(const char *name)
+{
+	/* Just empty function now - can't decide what to choose */
+	debug("%s: %s\n", __func__, name);
+
+	return 0;
+}
+#endif
+
+void board_init_f(ulong dummy)
+{
+	/* Clear the BSS. */
+	memset(__bss_start, 0, __bss_end - __bss_start);
+
+	arch_cpu_init();
+
+	board_init_r(NULL, 0);
+}
diff -Naur A/common/image-fdt.c B/common/image-fdt.c
--- A/common/image-fdt.c	2020-09-16 12:59:35.294548063 +0530
+++ B/common/image-fdt.c	2020-09-16 17:48:59.269106812 +0530
@@ -27,6 +27,11 @@
 /* adding a ramdisk needs 0x44 bytes in version 2008.10 */
 #define FDT_RAMDISK_OVERHEAD	0x80
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+/* IWG27S: Function declaration for Kernel DTS update */
+void iwg27s_fdt_update(void *fdt);
+#endif
+
 DECLARE_GLOBAL_DATA_PTR;
 
 static void fdt_error(const char *msg)
@@ -233,6 +238,10 @@
 	*of_flat_tree = of_start;
 	*of_size = of_len;
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: Function call for Kernel DTS update */
+	iwg27s_fdt_update(*of_flat_tree);
+#endif
 	if (CONFIG_IS_ENABLED(CMD_FDT))
 		set_working_fdt_addr(map_to_sysmem(*of_flat_tree));
 	return 0;
diff -Naur A/common/spl/spl_mmc.c B/common/spl/spl_mmc.c
--- A/common/spl/spl_mmc.c	2020-09-16 12:59:35.302548262 +0530
+++ B/common/spl/spl_mmc.c	2020-09-16 17:48:59.301107441 +0530
@@ -467,6 +467,12 @@
 #endif
 }
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+/* IWG27S: MMC: Correcting MMC/SD number order */
+SPL_LOAD_IMAGE_METHOD("MMC0", 0, BOOT_DEVICE_MMC1, spl_mmc_load_image);
+SPL_LOAD_IMAGE_METHOD("MMC1", 0, BOOT_DEVICE_MMC2_2, spl_mmc_load_image);
+#else
 SPL_LOAD_IMAGE_METHOD("MMC1", 0, BOOT_DEVICE_MMC1, spl_mmc_load_image);
 SPL_LOAD_IMAGE_METHOD("MMC2", 0, BOOT_DEVICE_MMC2, spl_mmc_load_image);
 SPL_LOAD_IMAGE_METHOD("MMC2_2", 0, BOOT_DEVICE_MMC2_2, spl_mmc_load_image);
+#endif
diff -Naur A/configs/imx8qm_iwg27s_2gb_defconfig B/configs/imx8qm_iwg27s_2gb_defconfig
--- A/configs/imx8qm_iwg27s_2gb_defconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/configs/imx8qm_iwg27s_2gb_defconfig	2020-09-16 17:48:59.601113341 +0530
@@ -0,0 +1,182 @@
+CONFIG_ARM=y
+CONFIG_SPL_SYS_ICACHE_OFF=y
+CONFIG_SPL_SYS_DCACHE_OFF=y
+CONFIG_ARCH_IMX8=y
+CONFIG_SYS_TEXT_BASE=0x80020000
+CONFIG_SPL_GPIO_SUPPORT=y
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_SYS_MALLOC_F_LEN=0x8000
+CONFIG_ENV_SIZE=0x2000
+CONFIG_ENV_OFFSET=0x400000
+CONFIG_DM_GPIO=y
+CONFIG_SPL_LOAD_IMX_CONTAINER=y
+CONFIG_IMX_CONTAINER_CFG="board/freescale/imx8qm_iwg27s/uboot-container.cfg"
+CONFIG_TARGET_IMX8QM_IWG27S=y
+CONFIG_SDRAM_SIZE_2GB=y
+CONFIG_SPL_MMC_SUPPORT=y
+CONFIG_SPL_EFI_PARTITION=n
+CONFIG_SPL_DOS_PARTITION=n
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_SPL_SERIAL_SUPPORT=y
+CONFIG_SPL_DRIVERS_MISC_SUPPORT=y
+CONFIG_USE_TINY_PRINTF=y
+CONFIG_NR_DRAM_BANKS=4
+CONFIG_SPL=y
+CONFIG_PANIC_HANG=y
+CONFIG_SPL_TEXT_BASE=0x100000
+CONFIG_OF_SYSTEM_SETUP=y
+CONFIG_SYS_EXTRA_OPTIONS="IMX_CONFIG=board/freescale/imx8qm_iwg27s/imximage.cfg"
+CONFIG_BOOTDELAY=3
+CONFIG_LOG=y
+CONFIG_SPL_BOARD_INIT=y
+# CONFIG_SPL_SYS_MALLOC_SIMPLE is not set
+CONFIG_SPL_SEPARATE_BSS=y
+CONFIG_SPL_POWER_SUPPORT=y
+CONFIG_SPL_POWER_DOMAIN=y
+CONFIG_SPL_WATCHDOG_SUPPORT=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_CPU=y
+# CONFIG_BOOTM_NETBSD is not set
+# CONFIG_CMD_IMPORTENV is not set
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DM=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8qm-iwg27s"
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SPL_DM=y
+CONFIG_SPL_CLK=y
+CONFIG_CLK_IMX8=y
+CONFIG_CPU=y
+CONFIG_IMX8_UNUSED_GPIO=y
+CONFIG_MXC_GPIO=y
+CONFIG_DM_PCA953X=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_MISC=y
+CONFIG_DM_MMC=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_FSL_USDHC=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_SPL_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+CONFIG_SPL_MMC_UHS_SUPPORT=y
+CONFIG_MMC_HS400_SUPPORT=y
+CONFIG_EFI_PARTITION=y
+CONFIG_PHYLIB=y
+CONFIG_PHY_ADDR_ENABLE=y
+CONFIG_PHY_ATHEROS=y
+CONFIG_DM_ETH=y
+CONFIG_PHY_GIGE=y
+CONFIG_FEC_MXC_SHARE_MDIO=y
+CONFIG_FEC_MXC_MDIO_BASE=0x5B040000
+CONFIG_FEC_MXC=y
+CONFIG_MII=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_IMX8=y
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX8_POWER_DOMAIN=y
+CONFIG_DM_REGULATOR=y
+CONFIG_SPL_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_SPL_DM_REGULATOR_FIXED=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_SPL_TINY_MEMSET=y
+# CONFIG_EFI_LOADER is not set
+
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_MEMTEST=y
+
+CONFIG_IMX_BOOTAUX=y
+
+CONFIG_DM_THERMAL=y
+CONFIG_IMX_SCU_THERMAL=y
+CONFIG_SPI=y
+CONFIG_FSL_FSPI=y
+CONFIG_DM_SPI=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_CMD_SF=y
+CONFIG_SF_DEFAULT_BUS=0
+CONFIG_SF_DEFAULT_CS=0
+CONFIG_SF_DEFAULT_SPEED=40000000
+CONFIG_SF_DEFAULT_MODE=0
+
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_IMX8=y
+CONFIG_DM_USB=y
+CONFIG_DM_USB_GADGET=y
+CONFIG_SPL_DM_USB_GADGET=y
+CONFIG_USB=y
+CONFIG_USB_GADGET=y
+CONFIG_CI_UDC=y
+CONFIG_USB_GADGET_DOWNLOAD=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0525
+CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_GADGET_DUALSPEED=y
+CONFIG_CDNS3_USB_PHY=y
+CONFIG_PHY=y
+CONFIG_SPL_PHY=y
+
+CONFIG_SPL_USB_GADGET=y
+CONFIG_SPL_USB_SDP_SUPPORT=y
+CONFIG_SPL_SDP_USB_DEV=1
+CONFIG_SDP_LOADADDR=0x80400000
+
+CONFIG_FASTBOOT=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_CMD_FASTBOOT=y
+CONFIG_ANDROID_BOOT_IMAGE=y
+CONFIG_FASTBOOT_UUU_SUPPORT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x40000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_USB_DEV=1
+
+CONFIG_BOOTAUX_RESERVED_MEM_BASE=0x88000000
+CONFIG_BOOTAUX_RESERVED_MEM_SIZE=0x08000000
+
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_AHCI=y
+CONFIG_IMX_AHCI=y
+CONFIG_DM_SCSI=y
+CONFIG_SCSI=y
+CONFIG_CMD_SCSI=y
+
+CONFIG_PCI=y
+CONFIG_DM_PCI=y
+
+CONFIG_USB_PORT_AUTO=y
+
+CONFIG_SNVS_SEC_SC=y
+
+CONFIG_VIDEO_IMX_HDP_LOAD=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+
+CONFIG_VIDEO_IMXDPUV1=y
+CONFIG_DM_VIDEO=y
+CONFIG_VIDEO_IMX8_LVDS=y
+CONFIG_VIDEO_IT6263_BRIDGE=y
+CONFIG_SYS_WHITE_ON_BLACK=y
diff -Naur A/configs/imx8qm_iwg27s_2gb_uuu_defconfig B/configs/imx8qm_iwg27s_2gb_uuu_defconfig
--- A/configs/imx8qm_iwg27s_2gb_uuu_defconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/configs/imx8qm_iwg27s_2gb_uuu_defconfig	2020-09-16 17:48:59.589113105 +0530
@@ -0,0 +1,183 @@
+CONFIG_ARM=y
+CONFIG_SPL_SYS_ICACHE_OFF=y
+CONFIG_SPL_SYS_DCACHE_OFF=y
+CONFIG_ARCH_IMX8=y
+CONFIG_SYS_TEXT_BASE=0x80020000
+CONFIG_SPL_GPIO_SUPPORT=y
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_SYS_MALLOC_F_LEN=0x8000
+CONFIG_ENV_SIZE=0x2000
+CONFIG_ENV_OFFSET=0x400000
+CONFIG_DM_GPIO=y
+CONFIG_SPL_LOAD_IMX_CONTAINER=y
+CONFIG_IMX_CONTAINER_CFG="board/freescale/imx8qm_iwg27s/uboot-container.cfg"
+CONFIG_TARGET_IMX8QM_IWG27S_UUU=y
+CONFIG_TARGET_IMX8QM_IWG27S=y
+CONFIG_SDRAM_SIZE_2GB=y
+CONFIG_SPL_MMC_SUPPORT=y
+CONFIG_SPL_EFI_PARTITION=n
+CONFIG_SPL_DOS_PARTITION=n
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_SPL_SERIAL_SUPPORT=y
+CONFIG_SPL_DRIVERS_MISC_SUPPORT=y
+CONFIG_USE_TINY_PRINTF=y
+CONFIG_NR_DRAM_BANKS=4
+CONFIG_SPL=y
+CONFIG_PANIC_HANG=y
+CONFIG_SPL_TEXT_BASE=0x100000
+CONFIG_OF_SYSTEM_SETUP=y
+CONFIG_SYS_EXTRA_OPTIONS="IMX_CONFIG=board/freescale/imx8qm_iwg27s/imximage.cfg"
+CONFIG_BOOTDELAY=3
+CONFIG_LOG=y
+CONFIG_SPL_BOARD_INIT=y
+# CONFIG_SPL_SYS_MALLOC_SIMPLE is not set
+CONFIG_SPL_SEPARATE_BSS=y
+CONFIG_SPL_POWER_SUPPORT=y
+CONFIG_SPL_POWER_DOMAIN=y
+CONFIG_SPL_WATCHDOG_SUPPORT=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_CPU=y
+# CONFIG_BOOTM_NETBSD is not set
+# CONFIG_CMD_IMPORTENV is not set
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DM=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8qm-iwg27s"
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SPL_DM=y
+CONFIG_SPL_CLK=y
+CONFIG_CLK_IMX8=y
+CONFIG_CPU=y
+CONFIG_IMX8_UNUSED_GPIO=y
+CONFIG_MXC_GPIO=y
+CONFIG_DM_PCA953X=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_MISC=y
+CONFIG_DM_MMC=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_FSL_USDHC=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_SPL_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+CONFIG_SPL_MMC_UHS_SUPPORT=y
+CONFIG_MMC_HS400_SUPPORT=y
+CONFIG_EFI_PARTITION=y
+CONFIG_PHYLIB=y
+CONFIG_PHY_ADDR_ENABLE=y
+CONFIG_PHY_ATHEROS=y
+CONFIG_DM_ETH=y
+CONFIG_PHY_GIGE=y
+CONFIG_FEC_MXC_SHARE_MDIO=y
+CONFIG_FEC_MXC_MDIO_BASE=0x5B040000
+CONFIG_FEC_MXC=y
+CONFIG_MII=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_IMX8=y
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX8_POWER_DOMAIN=y
+CONFIG_DM_REGULATOR=y
+CONFIG_SPL_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_SPL_DM_REGULATOR_FIXED=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_SPL_TINY_MEMSET=y
+# CONFIG_EFI_LOADER is not set
+
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_MEMTEST=y
+
+CONFIG_IMX_BOOTAUX=y
+
+CONFIG_DM_THERMAL=y
+CONFIG_IMX_SCU_THERMAL=y
+CONFIG_SPI=y
+CONFIG_FSL_FSPI=y
+CONFIG_DM_SPI=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_CMD_SF=y
+CONFIG_SF_DEFAULT_BUS=0
+CONFIG_SF_DEFAULT_CS=0
+CONFIG_SF_DEFAULT_SPEED=40000000
+CONFIG_SF_DEFAULT_MODE=0
+
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_IMX8=y
+CONFIG_DM_USB=y
+CONFIG_DM_USB_GADGET=y
+CONFIG_SPL_DM_USB_GADGET=y
+CONFIG_USB=y
+CONFIG_USB_GADGET=y
+CONFIG_CI_UDC=y
+CONFIG_USB_GADGET_DOWNLOAD=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0525
+CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_GADGET_DUALSPEED=y
+CONFIG_CDNS3_USB_PHY=y
+CONFIG_PHY=y
+CONFIG_SPL_PHY=y
+
+CONFIG_SPL_USB_GADGET=y
+CONFIG_SPL_USB_SDP_SUPPORT=y
+CONFIG_SPL_SDP_USB_DEV=1
+CONFIG_SDP_LOADADDR=0x80400000
+
+CONFIG_FASTBOOT=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_CMD_FASTBOOT=y
+CONFIG_ANDROID_BOOT_IMAGE=y
+CONFIG_FASTBOOT_UUU_SUPPORT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x40000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_USB_DEV=1
+
+CONFIG_BOOTAUX_RESERVED_MEM_BASE=0x88000000
+CONFIG_BOOTAUX_RESERVED_MEM_SIZE=0x08000000
+
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_AHCI=y
+CONFIG_IMX_AHCI=y
+CONFIG_DM_SCSI=y
+CONFIG_SCSI=y
+CONFIG_CMD_SCSI=y
+
+CONFIG_PCI=y
+CONFIG_DM_PCI=y
+
+CONFIG_USB_PORT_AUTO=y
+
+CONFIG_SNVS_SEC_SC=y
+
+CONFIG_VIDEO_IMX_HDP_LOAD=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+
+CONFIG_VIDEO_IMXDPUV1=y
+CONFIG_DM_VIDEO=y
+CONFIG_VIDEO_IMX8_LVDS=y
+CONFIG_VIDEO_IT6263_BRIDGE=y
+CONFIG_SYS_WHITE_ON_BLACK=y
diff -Naur A/configs/imx8qm_iwg27s_8gb_defconfig B/configs/imx8qm_iwg27s_8gb_defconfig
--- A/configs/imx8qm_iwg27s_8gb_defconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/configs/imx8qm_iwg27s_8gb_defconfig	2020-09-16 17:48:59.565112632 +0530
@@ -0,0 +1,182 @@
+CONFIG_ARM=y
+CONFIG_SPL_SYS_ICACHE_OFF=y
+CONFIG_SPL_SYS_DCACHE_OFF=y
+CONFIG_ARCH_IMX8=y
+CONFIG_SYS_TEXT_BASE=0x80020000
+CONFIG_SPL_GPIO_SUPPORT=y
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_SYS_MALLOC_F_LEN=0x8000
+CONFIG_ENV_SIZE=0x2000
+CONFIG_ENV_OFFSET=0x400000
+CONFIG_DM_GPIO=y
+CONFIG_SPL_LOAD_IMX_CONTAINER=y
+CONFIG_IMX_CONTAINER_CFG="board/freescale/imx8qm_iwg27s/uboot-container.cfg"
+CONFIG_TARGET_IMX8QM_IWG27S=y
+CONFIG_SDRAM_SIZE_8GB=y
+CONFIG_SPL_MMC_SUPPORT=y
+CONFIG_SPL_EFI_PARTITION=n
+CONFIG_SPL_DOS_PARTITION=n
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_SPL_SERIAL_SUPPORT=y
+CONFIG_SPL_DRIVERS_MISC_SUPPORT=y
+CONFIG_USE_TINY_PRINTF=y
+CONFIG_NR_DRAM_BANKS=4
+CONFIG_SPL=y
+CONFIG_PANIC_HANG=y
+CONFIG_SPL_TEXT_BASE=0x100000
+CONFIG_OF_SYSTEM_SETUP=y
+CONFIG_SYS_EXTRA_OPTIONS="IMX_CONFIG=board/freescale/imx8qm_iwg27s/imximage.cfg"
+CONFIG_BOOTDELAY=3
+CONFIG_LOG=y
+CONFIG_SPL_BOARD_INIT=y
+# CONFIG_SPL_SYS_MALLOC_SIMPLE is not set
+CONFIG_SPL_SEPARATE_BSS=y
+CONFIG_SPL_POWER_SUPPORT=y
+CONFIG_SPL_POWER_DOMAIN=y
+CONFIG_SPL_WATCHDOG_SUPPORT=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_CPU=y
+# CONFIG_BOOTM_NETBSD is not set
+# CONFIG_CMD_IMPORTENV is not set
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DM=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8qm-iwg27s"
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SPL_DM=y
+CONFIG_SPL_CLK=y
+CONFIG_CLK_IMX8=y
+CONFIG_CPU=y
+CONFIG_IMX8_UNUSED_GPIO=y
+CONFIG_MXC_GPIO=y
+CONFIG_DM_PCA953X=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_MISC=y
+CONFIG_DM_MMC=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_FSL_USDHC=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_SPL_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+CONFIG_SPL_MMC_UHS_SUPPORT=y
+CONFIG_MMC_HS400_SUPPORT=y
+CONFIG_EFI_PARTITION=y
+CONFIG_PHYLIB=y
+CONFIG_PHY_ADDR_ENABLE=y
+CONFIG_PHY_ATHEROS=y
+CONFIG_DM_ETH=y
+CONFIG_PHY_GIGE=y
+CONFIG_FEC_MXC_SHARE_MDIO=y
+CONFIG_FEC_MXC_MDIO_BASE=0x5B040000
+CONFIG_FEC_MXC=y
+CONFIG_MII=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_IMX8=y
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX8_POWER_DOMAIN=y
+CONFIG_DM_REGULATOR=y
+CONFIG_SPL_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_SPL_DM_REGULATOR_FIXED=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_SPL_TINY_MEMSET=y
+# CONFIG_EFI_LOADER is not set
+
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_MEMTEST=y
+
+CONFIG_IMX_BOOTAUX=y
+
+CONFIG_DM_THERMAL=y
+CONFIG_IMX_SCU_THERMAL=y
+CONFIG_SPI=y
+CONFIG_FSL_FSPI=y
+CONFIG_DM_SPI=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_CMD_SF=y
+CONFIG_SF_DEFAULT_BUS=0
+CONFIG_SF_DEFAULT_CS=0
+CONFIG_SF_DEFAULT_SPEED=40000000
+CONFIG_SF_DEFAULT_MODE=0
+
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_IMX8=y
+CONFIG_DM_USB=y
+CONFIG_DM_USB_GADGET=y
+CONFIG_SPL_DM_USB_GADGET=y
+CONFIG_USB=y
+CONFIG_USB_GADGET=y
+CONFIG_CI_UDC=y
+CONFIG_USB_GADGET_DOWNLOAD=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0525
+CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_GADGET_DUALSPEED=y
+CONFIG_CDNS3_USB_PHY=y
+CONFIG_PHY=y
+CONFIG_SPL_PHY=y
+
+CONFIG_SPL_USB_GADGET=y
+CONFIG_SPL_USB_SDP_SUPPORT=y
+CONFIG_SPL_SDP_USB_DEV=1
+CONFIG_SDP_LOADADDR=0x80400000
+
+CONFIG_FASTBOOT=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_CMD_FASTBOOT=y
+CONFIG_ANDROID_BOOT_IMAGE=y
+CONFIG_FASTBOOT_UUU_SUPPORT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x40000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_USB_DEV=1
+
+CONFIG_BOOTAUX_RESERVED_MEM_BASE=0x88000000
+CONFIG_BOOTAUX_RESERVED_MEM_SIZE=0x08000000
+
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_AHCI=y
+CONFIG_IMX_AHCI=y
+CONFIG_DM_SCSI=y
+CONFIG_SCSI=y
+CONFIG_CMD_SCSI=y
+
+CONFIG_PCI=y
+CONFIG_DM_PCI=y
+
+CONFIG_USB_PORT_AUTO=y
+
+CONFIG_SNVS_SEC_SC=y
+
+CONFIG_VIDEO_IMX_HDP_LOAD=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+
+CONFIG_VIDEO_IMXDPUV1=y
+CONFIG_DM_VIDEO=y
+CONFIG_VIDEO_IMX8_LVDS=y
+CONFIG_VIDEO_IT6263_BRIDGE=y
+CONFIG_SYS_WHITE_ON_BLACK=y
diff -Naur A/configs/imx8qm_iwg27s_8gb_uuu_defconfig B/configs/imx8qm_iwg27s_8gb_uuu_defconfig
--- A/configs/imx8qm_iwg27s_8gb_uuu_defconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/configs/imx8qm_iwg27s_8gb_uuu_defconfig	2020-09-16 17:48:59.601113341 +0530
@@ -0,0 +1,183 @@
+CONFIG_ARM=y
+CONFIG_SPL_SYS_ICACHE_OFF=y
+CONFIG_SPL_SYS_DCACHE_OFF=y
+CONFIG_ARCH_IMX8=y
+CONFIG_SYS_TEXT_BASE=0x80020000
+CONFIG_SPL_GPIO_SUPPORT=y
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_SYS_MALLOC_F_LEN=0x8000
+CONFIG_ENV_SIZE=0x2000
+CONFIG_ENV_OFFSET=0x400000
+CONFIG_DM_GPIO=y
+CONFIG_SPL_LOAD_IMX_CONTAINER=y
+CONFIG_IMX_CONTAINER_CFG="board/freescale/imx8qm_iwg27s/uboot-container.cfg"
+CONFIG_TARGET_IMX8QM_IWG27S_UUU=y
+CONFIG_TARGET_IMX8QM_IWG27S=y
+CONFIG_SDRAM_SIZE_8GB=y
+CONFIG_SPL_MMC_SUPPORT=y
+CONFIG_SPL_EFI_PARTITION=n
+CONFIG_SPL_DOS_PARTITION=n
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_SPL_SERIAL_SUPPORT=y
+CONFIG_SPL_DRIVERS_MISC_SUPPORT=y
+CONFIG_USE_TINY_PRINTF=y
+CONFIG_NR_DRAM_BANKS=4
+CONFIG_SPL=y
+CONFIG_PANIC_HANG=y
+CONFIG_SPL_TEXT_BASE=0x100000
+CONFIG_OF_SYSTEM_SETUP=y
+CONFIG_SYS_EXTRA_OPTIONS="IMX_CONFIG=board/freescale/imx8qm_iwg27s/imximage.cfg"
+CONFIG_BOOTDELAY=3
+CONFIG_LOG=y
+CONFIG_SPL_BOARD_INIT=y
+# CONFIG_SPL_SYS_MALLOC_SIMPLE is not set
+CONFIG_SPL_SEPARATE_BSS=y
+CONFIG_SPL_POWER_SUPPORT=y
+CONFIG_SPL_POWER_DOMAIN=y
+CONFIG_SPL_WATCHDOG_SUPPORT=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_CPU=y
+# CONFIG_BOOTM_NETBSD is not set
+# CONFIG_CMD_IMPORTENV is not set
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DM=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8qm-iwg27s"
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SPL_DM=y
+CONFIG_SPL_CLK=y
+CONFIG_CLK_IMX8=y
+CONFIG_CPU=y
+CONFIG_IMX8_UNUSED_GPIO=y
+CONFIG_MXC_GPIO=y
+CONFIG_DM_PCA953X=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_MISC=y
+CONFIG_DM_MMC=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_FSL_USDHC=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_SPL_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+CONFIG_SPL_MMC_UHS_SUPPORT=y
+CONFIG_MMC_HS400_SUPPORT=y
+CONFIG_EFI_PARTITION=y
+CONFIG_PHYLIB=y
+CONFIG_PHY_ADDR_ENABLE=y
+CONFIG_PHY_ATHEROS=y
+CONFIG_DM_ETH=y
+CONFIG_PHY_GIGE=y
+CONFIG_FEC_MXC_SHARE_MDIO=y
+CONFIG_FEC_MXC_MDIO_BASE=0x5B040000
+CONFIG_FEC_MXC=y
+CONFIG_MII=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_IMX8=y
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX8_POWER_DOMAIN=y
+CONFIG_DM_REGULATOR=y
+CONFIG_SPL_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_SPL_DM_REGULATOR_FIXED=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_SPL_TINY_MEMSET=y
+# CONFIG_EFI_LOADER is not set
+
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_MEMTEST=y
+
+CONFIG_IMX_BOOTAUX=y
+
+CONFIG_DM_THERMAL=y
+CONFIG_IMX_SCU_THERMAL=y
+CONFIG_SPI=y
+CONFIG_FSL_FSPI=y
+CONFIG_DM_SPI=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_CMD_SF=y
+CONFIG_SF_DEFAULT_BUS=0
+CONFIG_SF_DEFAULT_CS=0
+CONFIG_SF_DEFAULT_SPEED=40000000
+CONFIG_SF_DEFAULT_MODE=0
+
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_IMX8=y
+CONFIG_DM_USB=y
+CONFIG_DM_USB_GADGET=y
+CONFIG_SPL_DM_USB_GADGET=y
+CONFIG_USB=y
+CONFIG_USB_GADGET=y
+CONFIG_CI_UDC=y
+CONFIG_USB_GADGET_DOWNLOAD=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0525
+CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_GADGET_DUALSPEED=y
+CONFIG_CDNS3_USB_PHY=y
+CONFIG_PHY=y
+CONFIG_SPL_PHY=y
+
+CONFIG_SPL_USB_GADGET=y
+CONFIG_SPL_USB_SDP_SUPPORT=y
+CONFIG_SPL_SDP_USB_DEV=1
+CONFIG_SDP_LOADADDR=0x80400000
+
+CONFIG_FASTBOOT=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_CMD_FASTBOOT=y
+CONFIG_ANDROID_BOOT_IMAGE=y
+CONFIG_FASTBOOT_UUU_SUPPORT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x40000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_USB_DEV=1
+
+CONFIG_BOOTAUX_RESERVED_MEM_BASE=0x88000000
+CONFIG_BOOTAUX_RESERVED_MEM_SIZE=0x08000000
+
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_AHCI=y
+CONFIG_IMX_AHCI=y
+CONFIG_DM_SCSI=y
+CONFIG_SCSI=y
+CONFIG_CMD_SCSI=y
+
+CONFIG_PCI=y
+CONFIG_DM_PCI=y
+
+CONFIG_USB_PORT_AUTO=y
+
+CONFIG_SNVS_SEC_SC=y
+
+CONFIG_VIDEO_IMX_HDP_LOAD=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+
+CONFIG_VIDEO_IMXDPUV1=y
+CONFIG_DM_VIDEO=y
+CONFIG_VIDEO_IMX8_LVDS=y
+CONFIG_VIDEO_IT6263_BRIDGE=y
+CONFIG_SYS_WHITE_ON_BLACK=y
diff -Naur A/configs/imx8qm_iwg27s_defconfig B/configs/imx8qm_iwg27s_defconfig
--- A/configs/imx8qm_iwg27s_defconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/configs/imx8qm_iwg27s_defconfig	2020-09-16 17:48:59.601113341 +0530
@@ -0,0 +1,182 @@
+CONFIG_ARM=y
+CONFIG_SPL_SYS_ICACHE_OFF=y
+CONFIG_SPL_SYS_DCACHE_OFF=y
+CONFIG_ARCH_IMX8=y
+CONFIG_SYS_TEXT_BASE=0x80020000
+CONFIG_SPL_GPIO_SUPPORT=y
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_SYS_MALLOC_F_LEN=0x8000
+CONFIG_ENV_SIZE=0x2000
+CONFIG_ENV_OFFSET=0x400000
+CONFIG_DM_GPIO=y
+CONFIG_SPL_LOAD_IMX_CONTAINER=y
+CONFIG_IMX_CONTAINER_CFG="board/freescale/imx8qm_iwg27s/uboot-container.cfg"
+CONFIG_TARGET_IMX8QM_IWG27S=y
+CONFIG_SDRAM_SIZE_4GB=y
+CONFIG_SPL_MMC_SUPPORT=y
+CONFIG_SPL_EFI_PARTITION=n
+CONFIG_SPL_DOS_PARTITION=n
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_SPL_SERIAL_SUPPORT=y
+CONFIG_SPL_DRIVERS_MISC_SUPPORT=y
+CONFIG_USE_TINY_PRINTF=y
+CONFIG_NR_DRAM_BANKS=4
+CONFIG_SPL=y
+CONFIG_PANIC_HANG=y
+CONFIG_SPL_TEXT_BASE=0x100000
+CONFIG_OF_SYSTEM_SETUP=y
+CONFIG_SYS_EXTRA_OPTIONS="IMX_CONFIG=board/freescale/imx8qm_iwg27s/imximage.cfg"
+CONFIG_BOOTDELAY=3
+CONFIG_LOG=y
+CONFIG_SPL_BOARD_INIT=y
+# CONFIG_SPL_SYS_MALLOC_SIMPLE is not set
+CONFIG_SPL_SEPARATE_BSS=y
+CONFIG_SPL_POWER_SUPPORT=y
+CONFIG_SPL_POWER_DOMAIN=y
+CONFIG_SPL_WATCHDOG_SUPPORT=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_CPU=y
+# CONFIG_BOOTM_NETBSD is not set
+# CONFIG_CMD_IMPORTENV is not set
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DM=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8qm-iwg27s"
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SPL_DM=y
+CONFIG_SPL_CLK=y
+CONFIG_CLK_IMX8=y
+CONFIG_CPU=y
+CONFIG_IMX8_UNUSED_GPIO=y
+CONFIG_MXC_GPIO=y
+CONFIG_DM_PCA953X=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_MISC=y
+CONFIG_DM_MMC=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_FSL_USDHC=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_SPL_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+CONFIG_SPL_MMC_UHS_SUPPORT=y
+CONFIG_MMC_HS400_SUPPORT=y
+CONFIG_EFI_PARTITION=y
+CONFIG_PHYLIB=y
+CONFIG_PHY_ADDR_ENABLE=y
+CONFIG_PHY_ATHEROS=y
+CONFIG_DM_ETH=y
+CONFIG_PHY_GIGE=y
+CONFIG_FEC_MXC_SHARE_MDIO=y
+CONFIG_FEC_MXC_MDIO_BASE=0x5B040000
+CONFIG_FEC_MXC=y
+CONFIG_MII=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_IMX8=y
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX8_POWER_DOMAIN=y
+CONFIG_DM_REGULATOR=y
+CONFIG_SPL_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_SPL_DM_REGULATOR_FIXED=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_SPL_TINY_MEMSET=y
+# CONFIG_EFI_LOADER is not set
+
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_MEMTEST=y
+
+CONFIG_IMX_BOOTAUX=y
+
+CONFIG_DM_THERMAL=y
+CONFIG_IMX_SCU_THERMAL=y
+CONFIG_SPI=y
+CONFIG_FSL_FSPI=y
+CONFIG_DM_SPI=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_CMD_SF=y
+CONFIG_SF_DEFAULT_BUS=0
+CONFIG_SF_DEFAULT_CS=0
+CONFIG_SF_DEFAULT_SPEED=40000000
+CONFIG_SF_DEFAULT_MODE=0
+
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_IMX8=y
+CONFIG_DM_USB=y
+CONFIG_DM_USB_GADGET=y
+CONFIG_SPL_DM_USB_GADGET=y
+CONFIG_USB=y
+CONFIG_USB_GADGET=y
+CONFIG_CI_UDC=y
+CONFIG_USB_GADGET_DOWNLOAD=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0525
+CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_GADGET_DUALSPEED=y
+CONFIG_CDNS3_USB_PHY=y
+CONFIG_PHY=y
+CONFIG_SPL_PHY=y
+
+CONFIG_SPL_USB_GADGET=y
+CONFIG_SPL_USB_SDP_SUPPORT=y
+CONFIG_SPL_SDP_USB_DEV=1
+CONFIG_SDP_LOADADDR=0x80400000
+
+CONFIG_FASTBOOT=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_CMD_FASTBOOT=y
+CONFIG_ANDROID_BOOT_IMAGE=y
+CONFIG_FASTBOOT_UUU_SUPPORT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x40000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_USB_DEV=1
+
+CONFIG_BOOTAUX_RESERVED_MEM_BASE=0x88000000
+CONFIG_BOOTAUX_RESERVED_MEM_SIZE=0x08000000
+
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_AHCI=y
+CONFIG_IMX_AHCI=y
+CONFIG_DM_SCSI=y
+CONFIG_SCSI=y
+CONFIG_CMD_SCSI=y
+
+CONFIG_PCI=y
+CONFIG_DM_PCI=y
+
+CONFIG_USB_PORT_AUTO=y
+
+CONFIG_SNVS_SEC_SC=y
+
+CONFIG_VIDEO_IMX_HDP_LOAD=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+
+CONFIG_VIDEO_IMXDPUV1=y
+CONFIG_DM_VIDEO=y
+CONFIG_VIDEO_IMX8_LVDS=y
+CONFIG_VIDEO_IT6263_BRIDGE=y
+CONFIG_SYS_WHITE_ON_BLACK=y
diff -Naur A/configs/imx8qm_iwg27s_uuu_defconfig B/configs/imx8qm_iwg27s_uuu_defconfig
--- A/configs/imx8qm_iwg27s_uuu_defconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/configs/imx8qm_iwg27s_uuu_defconfig	2020-09-16 17:48:59.601113341 +0530
@@ -0,0 +1,183 @@
+CONFIG_ARM=y
+CONFIG_SPL_SYS_ICACHE_OFF=y
+CONFIG_SPL_SYS_DCACHE_OFF=y
+CONFIG_ARCH_IMX8=y
+CONFIG_SYS_TEXT_BASE=0x80020000
+CONFIG_SPL_GPIO_SUPPORT=y
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_SYS_MALLOC_F_LEN=0x8000
+CONFIG_ENV_SIZE=0x2000
+CONFIG_ENV_OFFSET=0x400000
+CONFIG_DM_GPIO=y
+CONFIG_SPL_LOAD_IMX_CONTAINER=y
+CONFIG_IMX_CONTAINER_CFG="board/freescale/imx8qm_iwg27s/uboot-container.cfg"
+CONFIG_TARGET_IMX8QM_IWG27S_UUU=y
+CONFIG_TARGET_IMX8QM_IWG27S=y
+CONFIG_SDRAM_SIZE_4GB=y
+CONFIG_SPL_MMC_SUPPORT=y
+CONFIG_SPL_EFI_PARTITION=n
+CONFIG_SPL_DOS_PARTITION=n
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_SPL_SERIAL_SUPPORT=y
+CONFIG_SPL_DRIVERS_MISC_SUPPORT=y
+CONFIG_USE_TINY_PRINTF=y
+CONFIG_NR_DRAM_BANKS=4
+CONFIG_SPL=y
+CONFIG_PANIC_HANG=y
+CONFIG_SPL_TEXT_BASE=0x100000
+CONFIG_OF_SYSTEM_SETUP=y
+CONFIG_SYS_EXTRA_OPTIONS="IMX_CONFIG=board/freescale/imx8qm_iwg27s/imximage.cfg"
+CONFIG_BOOTDELAY=3
+CONFIG_LOG=y
+CONFIG_SPL_BOARD_INIT=y
+# CONFIG_SPL_SYS_MALLOC_SIMPLE is not set
+CONFIG_SPL_SEPARATE_BSS=y
+CONFIG_SPL_POWER_SUPPORT=y
+CONFIG_SPL_POWER_DOMAIN=y
+CONFIG_SPL_WATCHDOG_SUPPORT=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_CPU=y
+# CONFIG_BOOTM_NETBSD is not set
+# CONFIG_CMD_IMPORTENV is not set
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DM=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8qm-iwg27s"
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SPL_DM=y
+CONFIG_SPL_CLK=y
+CONFIG_CLK_IMX8=y
+CONFIG_CPU=y
+CONFIG_IMX8_UNUSED_GPIO=y
+CONFIG_MXC_GPIO=y
+CONFIG_DM_PCA953X=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_MISC=y
+CONFIG_DM_MMC=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_FSL_USDHC=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_SPL_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+CONFIG_SPL_MMC_UHS_SUPPORT=y
+CONFIG_MMC_HS400_SUPPORT=y
+CONFIG_EFI_PARTITION=y
+CONFIG_PHYLIB=y
+CONFIG_PHY_ADDR_ENABLE=y
+CONFIG_PHY_ATHEROS=y
+CONFIG_DM_ETH=y
+CONFIG_PHY_GIGE=y
+CONFIG_FEC_MXC_SHARE_MDIO=y
+CONFIG_FEC_MXC_MDIO_BASE=0x5B040000
+CONFIG_FEC_MXC=y
+CONFIG_MII=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_IMX8=y
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX8_POWER_DOMAIN=y
+CONFIG_DM_REGULATOR=y
+CONFIG_SPL_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_SPL_DM_REGULATOR_FIXED=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_SPL_TINY_MEMSET=y
+# CONFIG_EFI_LOADER is not set
+
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_MEMTEST=y
+
+CONFIG_IMX_BOOTAUX=y
+
+CONFIG_DM_THERMAL=y
+CONFIG_IMX_SCU_THERMAL=y
+CONFIG_SPI=y
+CONFIG_FSL_FSPI=y
+CONFIG_DM_SPI=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_CMD_SF=y
+CONFIG_SF_DEFAULT_BUS=0
+CONFIG_SF_DEFAULT_CS=0
+CONFIG_SF_DEFAULT_SPEED=40000000
+CONFIG_SF_DEFAULT_MODE=0
+
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_IMX8=y
+CONFIG_DM_USB=y
+CONFIG_DM_USB_GADGET=y
+CONFIG_SPL_DM_USB_GADGET=y
+CONFIG_USB=y
+CONFIG_USB_GADGET=y
+CONFIG_CI_UDC=y
+CONFIG_USB_GADGET_DOWNLOAD=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0525
+CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_GADGET_DUALSPEED=y
+CONFIG_CDNS3_USB_PHY=y
+CONFIG_PHY=y
+CONFIG_SPL_PHY=y
+
+CONFIG_SPL_USB_GADGET=y
+CONFIG_SPL_USB_SDP_SUPPORT=y
+CONFIG_SPL_SDP_USB_DEV=1
+CONFIG_SDP_LOADADDR=0x80400000
+
+CONFIG_FASTBOOT=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_CMD_FASTBOOT=y
+CONFIG_ANDROID_BOOT_IMAGE=y
+CONFIG_FASTBOOT_UUU_SUPPORT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x40000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_USB_DEV=1
+
+CONFIG_BOOTAUX_RESERVED_MEM_BASE=0x88000000
+CONFIG_BOOTAUX_RESERVED_MEM_SIZE=0x08000000
+
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_AHCI=y
+CONFIG_IMX_AHCI=y
+CONFIG_DM_SCSI=y
+CONFIG_SCSI=y
+CONFIG_CMD_SCSI=y
+
+CONFIG_PCI=y
+CONFIG_DM_PCI=y
+
+CONFIG_USB_PORT_AUTO=y
+
+CONFIG_SNVS_SEC_SC=y
+
+CONFIG_VIDEO_IMX_HDP_LOAD=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+
+CONFIG_VIDEO_IMXDPUV1=y
+CONFIG_DM_VIDEO=y
+CONFIG_VIDEO_IMX8_LVDS=y
+CONFIG_VIDEO_IT6263_BRIDGE=y
+CONFIG_SYS_WHITE_ON_BLACK=y
diff -Naur A/drivers/ata/imx_ahci.c B/drivers/ata/imx_ahci.c
--- A/drivers/ata/imx_ahci.c	2020-09-16 12:59:35.622556254 +0530
+++ B/drivers/ata/imx_ahci.c	2020-09-16 17:48:59.765116565 +0530
@@ -610,6 +610,8 @@
 	}
 #endif
 
+#ifndef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: SATA: Commenting SATA clock GPIO */ 
 	/* Fetch GPIO, then enable the external OSC */
 	ret = gpio_request_by_name(dev, "clkreq-gpio", 0, &imxpriv->clkreq_gpio,
 				   (GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE));
@@ -617,7 +619,7 @@
 		dev_err(dev, "%d unable to get clkreq.\n", ret);
 		return ret;
 	}
-
+#endif
 	return 0;
 }
 
diff -Naur A/drivers/clk/imx/clk-imx8qm.c B/drivers/clk/imx/clk-imx8qm.c
--- A/drivers/clk/imx/clk-imx8qm.c	2020-09-16 12:59:35.638556652 +0530
+++ B/drivers/clk/imx/clk-imx8qm.c	2020-09-16 17:48:59.821117666 +0530
@@ -40,6 +40,10 @@
 	CLK_4( IMX8QM_UART1_DIV, "UART1_DIV", SC_R_UART_1, SC_PM_CLK_PER ),
 	CLK_4( IMX8QM_UART2_DIV, "UART2_DIV", SC_R_UART_2, SC_PM_CLK_PER ),
 	CLK_4( IMX8QM_UART3_DIV, "UART3_DIV", SC_R_UART_3, SC_PM_CLK_PER ),
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: UART: Support for Debug LPUART4 clock */
+	CLK_4( IMX8QM_UART4_DIV, "UART4_DIV", SC_R_UART_4, SC_PM_CLK_PER ),
+#endif
 	CLK_4( IMX8QM_SDHC0_DIV, "SDHC0_DIV", SC_R_SDHC_0, SC_PM_CLK_PER ),
 	CLK_4( IMX8QM_SDHC1_DIV, "SDHC1_DIV", SC_R_SDHC_1, SC_PM_CLK_PER ),
 	CLK_4( IMX8QM_SDHC2_DIV, "SDHC2_DIV", SC_R_SDHC_2, SC_PM_CLK_PER ),
@@ -139,6 +143,11 @@
 	CLK_5( IMX8QM_UART2_IPG_CLK, "UART2_IPG", 16, LPUART_2_LPCG, IMX8QM_IPG_DMA_CLK_ROOT ),
 	CLK_5( IMX8QM_UART3_CLK, "UART3_CLK", 0, LPUART_3_LPCG, IMX8QM_UART3_DIV ),
 	CLK_5( IMX8QM_UART3_IPG_CLK, "UART3_IPG", 16, LPUART_3_LPCG, IMX8QM_IPG_DMA_CLK_ROOT ),
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: UART: Support for Debug LPUART4 clock */
+	CLK_5( IMX8QM_UART4_CLK, "UART4_CLK", 0, LPUART_4_LPCG, IMX8QM_UART4_DIV ),
+	CLK_5( IMX8QM_UART4_IPG_CLK, "UART4_IPG", 16, LPUART_4_LPCG, IMX8QM_IPG_DMA_CLK_ROOT ),
+#endif
 
 	CLK_5( IMX8QM_SDHC0_CLK, "SDHC0_CLK", 0, USDHC_0_LPCG, IMX8QM_SDHC0_DIV ),
 	CLK_5( IMX8QM_SDHC0_IPG_CLK, "SDHC0_IPG", 16, USDHC_0_LPCG, IMX8QM_IPG_CONN_CLK_ROOT ),
diff -Naur A/drivers/cpu/imx8_cpu.c B/drivers/cpu/imx8_cpu.c
--- A/drivers/cpu/imx8_cpu.c	2020-09-16 12:59:35.650556953 +0530
+++ B/drivers/cpu/imx8_cpu.c	2020-09-16 17:48:59.841118060 +0530
@@ -30,6 +30,11 @@
 	case MXC_CPU_IMX8QXP:
 	case MXC_CPU_IMX8QXP_A0:
 		return "QXP";
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: CPU: Support for i.MX8QP Variant */
+	case MXC_CPU_IMX8QP:
+		return "QP";
+#endif
 	case MXC_CPU_IMX8QM:
 		return "QM";
 	case MXC_CPU_IMX8DXL:
diff -Naur A/drivers/fastboot/fb_fsl/fb_fsl_common.c B/drivers/fastboot/fb_fsl/fb_fsl_common.c
--- A/drivers/fastboot/fb_fsl/fb_fsl_common.c	2020-09-16 12:59:35.674557551 +0530
+++ B/drivers/fastboot/fb_fsl/fb_fsl_common.c	2020-09-16 17:48:59.949120184 +0530
@@ -182,6 +182,12 @@
 	} else if (is_imx8qm()) {
 		if (!env_get("soc_type"))
 			env_set("soc_type", "imx8qm");
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: CPU: Support for i.MX8QP Variant */
+	} else if (is_imx8qp()) {
+		if (!env_get("soc_type"))
+			env_set("soc_type", "imx8qp");
+#endif
 	} else if (is_imx8qxp()) {
 		if (!env_get("soc_type"))
 			env_set("soc_type", "imx8qxp");
diff -Naur A/drivers/fastboot/fb_fsl/fb_fsl_partitions.c B/drivers/fastboot/fb_fsl/fb_fsl_partitions.c
--- A/drivers/fastboot/fb_fsl/fb_fsl_partitions.c	2020-09-16 12:59:35.674557551 +0530
+++ B/drivers/fastboot/fb_fsl/fb_fsl_partitions.c	2020-09-16 17:48:59.949120184 +0530
@@ -55,7 +55,12 @@
 {
 	if (is_imx8mq() || is_imx8mm() || ((is_imx8qm() || is_imx8qxp()) && is_soc_rev(CHIP_REV_A)))
 		return 0x8400;
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: CPU: Support for i.MX8QP Variant */
+	else if (is_imx8qm() || is_imx8qp() || (is_imx8qxp() && !is_soc_rev(CHIP_REV_B))) {
+#else
 	else if (is_imx8qm() || (is_imx8qxp() && !is_soc_rev(CHIP_REV_B))) {
+#endif
 		if (MEK_8QM_EMMC == fastboot_devinfo.dev_id)
 		/* target device is eMMC boot0 partition, bootloader offset is 0x0 */
 			return 0x0;
diff -Naur A/drivers/gpio/gpio-unused.c B/drivers/gpio/gpio-unused.c
--- A/drivers/gpio/gpio-unused.c	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/gpio/gpio-unused.c	2020-09-16 17:48:59.957120341 +0530
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2020 iWave Systems Technologies Pvt. Ltd.
+ *
+ */
+
+/*
+ * @file gpio-unused.c
+ *
+ * @brief Simple driver to set the unused GPIOs as input
+ *
+ * @ingroup GPIO
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <errno.h>
+#include <fdtdec.h>
+#include <malloc.h>
+#include <asm-generic/gpio.h>
+#include <linux/bug.h>
+#include <linux/ctype.h>
+#include <clk.h>
+#include <dm/device_compat.h>
+#include <dm/pinctrl.h>
+#include <asm/gpio.h>
+#include <asm/io.h>
+
+/* 
+ * iw_gpio_probe - Probe method for the GPIO device.
+ * @np: pointer to device tree node
+ *
+ * This function probes the Unused GPIOs in the device tree. It request GPIOs
+ * as input. It returns 0, if all the GPIOs is requested as input
+ * or a negative value if there is an error.
+ */
+static int iw_gpio_probe(struct udevice *dev)
+{
+	struct gpio_desc *num_gpios;
+	int num_ctrl, ret;
+
+
+	/* Fill GPIO pin array */
+	num_ctrl = gpio_get_list_count(dev, "gpios");
+	if (num_ctrl > 0) {
+		num_gpios = malloc(sizeof(struct gpio_desc) *num_ctrl);
+
+
+		ret = gpio_request_list_by_name(dev, "gpios", num_gpios,
+				num_ctrl, GPIOD_IS_IN);
+		if (ret < 0) {
+			printf("Can't get %s gpios! Error: %d", dev->name, ret);
+			return ret;
+		}
+
+		free(num_gpios);            
+	} else {
+		dev_err(dev, "gpios DT property empty / missing\n");
+		return -ENODEV;
+	}	
+
+	return 0;
+}
+
+static int iw_gpio_remove(struct udevice *dev)
+{
+	/* Platform not registerd return silently */
+	return 0;
+}
+
+static const struct udevice_id iw_gpio_ids[] = {
+	{ .compatible = "iwave,unused-gpios" },
+	{ }
+};
+
+U_BOOT_DRIVER(iwgpio_unused) = {
+	.name   = "iw_gpio",
+	.id     = UCLASS_GPIO,
+	.probe          = iw_gpio_probe,
+	.of_match 	= iw_gpio_ids,
+	.remove         = iw_gpio_remove,
+};
diff -Naur A/drivers/gpio/Kconfig B/drivers/gpio/Kconfig
--- A/drivers/gpio/Kconfig	2020-09-16 12:59:35.678557652 +0530
+++ B/drivers/gpio/Kconfig	2020-09-16 17:48:59.957120341 +0530
@@ -438,4 +438,10 @@
 	help
 	  Say yes here to support MediaTek MT7621 compatible GPIOs.
 
+config IMX8_UNUSED_GPIO
+        bool "iWave unused GPIO"
+        depends on DM && TARGET_IMX8QM_IWG27S
+        default n
+        help
+          Say yes here to set the unused GPIOs as input in iWG27S platform.
 endmenu
diff -Naur A/drivers/gpio/Makefile B/drivers/gpio/Makefile
--- A/drivers/gpio/Makefile	2020-09-16 12:59:35.678557652 +0530
+++ B/drivers/gpio/Makefile	2020-09-16 17:48:59.961120420 +0530
@@ -65,3 +65,4 @@
 obj-$(CONFIG_MT7621_GPIO)	+= mt7621_gpio.o
 obj-$(CONFIG_MSCC_SGPIO)	+= mscc_sgpio.o
 obj-$(CONFIG_SIFIVE_GPIO)	+= sifive-gpio.o
+obj-$(CONFIG_IMX8_UNUSED_GPIO)	+= gpio-unused.o
diff -Naur A/drivers/mmc/mmc-uclass.c B/drivers/mmc/mmc-uclass.c
--- A/drivers/mmc/mmc-uclass.c	2020-09-16 12:59:35.702558252 +0530
+++ B/drivers/mmc/mmc-uclass.c	2020-09-16 17:49:00.065122465 +0530
@@ -13,6 +13,12 @@
 #include <linux/compat.h>
 #include "mmc_private.h"
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+/* IWG27S: Get Board revision number globally */
+extern int bom_rev;
+void get_board_info(void);
+#endif
+
 int dm_mmc_send_cmd(struct udevice *dev, struct mmc_cmd *cmd,
 		    struct mmc_data *data)
 {
@@ -215,10 +221,23 @@
 			cfg->host_caps |= MMC_CAP_NEEDS_POLL;
 	}
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: Get Board revision number globally */
+	get_board_info();
+
+	/* IWG27S: Set SDIO voltage to fixed 3.3v only for B0 PMIC supported R1.x board */
+	if (bom_rev == 2) {
+		if (dev_read_bool(dev, "no-1-8-v")) {
+			cfg->host_caps &= ~(UHS_CAPS | MMC_MODE_HS200 |
+					MMC_MODE_HS400 | MMC_MODE_HS400_ES);
+		}
+	}
+#else
 	if (dev_read_bool(dev, "no-1-8-v")) {
 		cfg->host_caps &= ~(UHS_CAPS | MMC_MODE_HS200 |
 				    MMC_MODE_HS400 | MMC_MODE_HS400_ES);
 	}
+#endif
 
 	return 0;
 }
diff -Naur A/drivers/usb/host/xhci-ring.c B/drivers/usb/host/xhci-ring.c
--- A/drivers/usb/host/xhci-ring.c	2020-09-16 12:59:35.870562447 +0530
+++ B/drivers/usb/host/xhci-ring.c	2020-09-16 17:49:00.441129862 +0530
@@ -225,7 +225,13 @@
 		puts("WARN waiting for error on ep to be cleared\n");
 		return -EINVAL;
 	case EP_STATE_HALTED:
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+		/* IWG27S: USB: Workaround for USB R3.0 reset */
+		debug("WARN halted endpoint, queueing URB anyway.\n");
+		return -EPIPE;
+#else
 		puts("WARN halted endpoint, queueing URB anyway.\n");
+#endif
 	case EP_STATE_STOPPED:
 	case EP_STATE_RUNNING:
 		debug("EP STATE RUNNING.\n");
diff -Naur A/env/common.c B/env/common.c
--- A/env/common.c	2020-09-16 12:59:35.930563945 +0530
+++ B/env/common.c	2020-09-16 17:49:00.717135291 +0530
@@ -18,6 +18,14 @@
 #include <malloc.h>
 #include <u-boot/crc.h>
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+/* IWG27S: Support auto boot environment selection */
+#include <asm/mach-imx/boot_mode.h>
+
+/* IWG27S: Storing boot device number globally */
+extern enum boot_device get_boot_device(void);
+#endif
+
 DECLARE_GLOBAL_DATA_PTR;
 
 /************************************************************************
@@ -63,11 +71,40 @@
 
 void env_set_default(const char *s, int flags)
 {
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: Support auto boot environment selection */
+	switch (get_boot_device()) {
+		case MMC1_BOOT:
+			if (sizeof(default_environment_emmc) > ENV_SIZE) {
+				puts("*** Error - default environment is too large\n\n");
+				return;
+			}
+			break;
+		case SD2_BOOT :
+			if (sizeof(default_environment_ssd) > ENV_SIZE) {
+				puts("*** Error - default environment is too large\n\n");
+				return;
+			}
+			break;
+		case SD3_BOOT :
+			if (sizeof(default_environment_msd) > ENV_SIZE) {
+				puts("*** Error - default environment is too large\n\n");
+				return;
+			}
+			break;
+		default:
+			if (sizeof(default_environment) > ENV_SIZE) {
+				puts("*** Error - default environment is too large\n\n");
+				return;
+			}
+			break;
+	}
+#else
 	if (sizeof(default_environment) > ENV_SIZE) {
 		puts("*** Error - default environment is too large\n\n");
 		return;
 	}
-
+#endif
 	if (s) {
 		if ((flags & H_INTERACTIVE) == 0) {
 			printf("*** Warning - %s, "
@@ -79,6 +116,47 @@
 		debug("Using default environment\n");
 	}
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: Support auto boot environment selection */
+	switch (get_boot_device()) {
+		case MMC1_BOOT:
+			if (himport_r(&env_htab, (char *)default_environment_emmc,
+						sizeof(default_environment_emmc), '\0', flags, 0,
+						0, NULL) == 0)
+				pr_err("Environment import failed: errno = %d\n", errno);
+
+			gd->flags |= GD_FLG_ENV_READY;
+			gd->flags |= GD_FLG_ENV_DEFAULT;
+			break;
+		case SD2_BOOT :
+			if (himport_r(&env_htab, (char *)default_environment_ssd,
+						sizeof(default_environment_ssd), '\0', flags, 0,
+						0, NULL) == 0)
+				pr_err("Environment import failed: errno = %d\n", errno);
+
+			gd->flags |= GD_FLG_ENV_READY;
+			gd->flags |= GD_FLG_ENV_DEFAULT;
+			break;
+		case SD3_BOOT :
+			if (himport_r(&env_htab, (char *)default_environment_msd,
+						sizeof(default_environment_msd), '\0', flags, 0,
+						0, NULL) == 0)
+				pr_err("Environment import failed: errno = %d\n", errno);
+
+			gd->flags |= GD_FLG_ENV_READY;
+			gd->flags |= GD_FLG_ENV_DEFAULT;
+			break;
+		default:
+			if (himport_r(&env_htab, (char *)default_environment,
+						sizeof(default_environment), '\0', flags, 0,
+						0, NULL) == 0)
+				pr_err("Environment import failed: errno = %d\n", errno);
+
+			gd->flags |= GD_FLG_ENV_READY;
+			gd->flags |= GD_FLG_ENV_DEFAULT;
+			break;
+	}
+#else
 	if (himport_r(&env_htab, (char *)default_environment,
 			sizeof(default_environment), '\0', flags, 0,
 			0, NULL) == 0)
@@ -87,6 +165,7 @@
 
 	gd->flags |= GD_FLG_ENV_READY;
 	gd->flags |= GD_FLG_ENV_DEFAULT;
+#endif
 }
 
 
@@ -98,9 +177,35 @@
 	 * (and use \0 as a separator)
 	 */
 	flags |= H_NOCLEAR;
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+	/* IWG27S: Support auto boot environment selection */
+	switch (get_boot_device()) {
+		case MMC1_BOOT:
+			return himport_r(&env_htab, (const char *)default_environment_emmc,
+					sizeof(default_environment_emmc), '\0',
+					flags, 0, nvars, vars);
+			break;
+		case SD2_BOOT :
+			return himport_r(&env_htab, (const char *)default_environment_ssd,
+					sizeof(default_environment_ssd), '\0',
+					flags, 0, nvars, vars);
+			break;
+		case SD3_BOOT :
+			return himport_r(&env_htab, (const char *)default_environment_msd,
+					sizeof(default_environment_msd), '\0',
+					flags, 0, nvars, vars);
+			break;
+		default:
+			return himport_r(&env_htab, (const char *)default_environment,
+					sizeof(default_environment), '\0',
+					flags, 0, nvars, vars);
+			break;
+	}
+#else
 	return himport_r(&env_htab, (const char *)default_environment,
 				sizeof(default_environment), '\0',
 				flags, 0, nvars, vars);
+#endif
 }
 
 /*
diff -Naur A/env/env.c B/env/env.c
--- A/env/env.c	2020-09-16 12:59:35.930563945 +0530
+++ B/env/env.c	2020-09-16 17:49:00.697134897 +0530
@@ -7,6 +7,13 @@
 #include <common.h>
 #include <env.h>
 #include <env_internal.h>
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+/* IWG27S: Support auto boot environment selection */
+#include <asm/mach-imx/boot_mode.h>
+
+/* IWG27S: Storing boot device number globally */
+extern enum boot_device get_boot_device(void);
+#endif
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -303,9 +310,30 @@
 		return -ENODEV;
 
 	if (ret == -ENOENT) {
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+		/* IWG27S: Support auto boot environment selection */
+		switch (get_boot_device()) {
+			case MMC1_BOOT:
+				gd->env_addr = (ulong)&default_environment_emmc[0];
+				gd->env_valid = ENV_VALID;
+				break;
+			case SD2_BOOT :
+				gd->env_addr = (ulong)&default_environment_ssd[0];
+				gd->env_valid = ENV_VALID;
+				break;
+			case SD3_BOOT :
+				gd->env_addr = (ulong)&default_environment_msd[0];
+				gd->env_valid = ENV_VALID;
+				break;
+			default:
+				gd->env_addr = (ulong)&default_environment[0];
+				gd->env_valid = ENV_VALID;
+				break;
+		}
+#else
 		gd->env_addr = (ulong)&default_environment[0];
 		gd->env_valid = ENV_VALID;
-
+#endif
 		return 0;
 	}
 
diff -Naur A/include/configs/imx8qm_iwg27s.h B/include/configs/imx8qm_iwg27s.h
--- A/include/configs/imx8qm_iwg27s.h	1970-01-01 05:30:00.000000000 +0530
+++ B/include/configs/imx8qm_iwg27s.h	2020-09-16 17:49:00.877138438 +0530
@@ -0,0 +1,335 @@
+/*
+ * Copyright (C) 2020 iWave System Technologies Pvt Ltd.
+ */
+
+#ifndef __IMX8QM_IWG27S_H
+#define __IMX8QM_IWG27S_H
+
+#include <linux/sizes.h>
+#include <asm/arch/imx-regs.h>
+#include "imx_env.h"
+
+#define BSP_VERSION		 	"iW-PRGEE-SC-01-R1.0-REL0.1-Linux5.4.24"
+
+#ifdef CONFIG_SPL_BUILD
+#define CONFIG_SPL_MAX_SIZE				(192 * 1024)
+#define CONFIG_SYS_MONITOR_LEN				(1024 * 1024)
+#define CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_USE_SECTOR
+#define CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR                0x1040 /* (flash.bin_offset + 2Mb)/sector_size */
+
+/*
+ * 0x08081000 - 0x08180FFF is for m4_0 xip image,
+ * 0x08181000 - 0x008280FFF is for m4_1 xip image
+  * So 3rd container image may start from 0x8281000
+ */
+#define CONFIG_SYS_UBOOT_BASE 0x08281000
+#define CONFIG_SYS_MMCSD_FS_BOOT_PARTITION             0
+
+#define CONFIG_SPL_LDSCRIPT		"arch/arm/cpu/armv8/u-boot-spl.lds"
+#define CONFIG_SPL_STACK		0x013fff0
+#define CONFIG_SPL_BSS_START_ADDR      0x00130000
+#define CONFIG_SPL_BSS_MAX_SIZE		0x1000	/* 4 KB */
+#define CONFIG_SYS_SPL_MALLOC_START	0x82200000
+#define CONFIG_SYS_SPL_MALLOC_SIZE     0x80000	/* 512 KB */
+#define CONFIG_SERIAL_LPUART_BASE	0x5a060000
+#define CONFIG_MALLOC_F_ADDR		0x00138000
+
+#define CONFIG_SPL_RAW_IMAGE_ARM_TRUSTED_FIRMWARE
+
+#define CONFIG_SPL_ABORT_ON_RAW_IMAGE
+
+#define CONFIG_OF_EMBED
+#endif
+
+#define CONFIG_REMAKE_ELF
+
+#define CONFIG_BOARD_EARLY_INIT_F
+
+#define CONFIG_CMD_READ
+
+/* Flat Device Tree Definitions */
+#define CONFIG_OF_BOARD_SETUP
+
+#undef CONFIG_CMD_EXPORTENV
+#undef CONFIG_CMD_IMPORTENV
+#undef CONFIG_CMD_IMLS
+
+#undef CONFIG_CMD_CRC32
+
+#define CONFIG_SYS_FSL_ESDHC_ADDR       0
+#define USDHC1_BASE_ADDR                0x5B010000
+#define USDHC2_BASE_ADDR                0x5B020000
+#define USDHC3_BASE_ADDR                0x5B030000
+
+#define CONFIG_ENV_OVERWRITE
+
+#define CONFIG_PCIE_IMX
+#define CONFIG_CMD_PCI
+#define CONFIG_PCI_SCAN_SHOW
+#define CONFIG_IMX_PCIEB
+
+#define CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+
+#define CONFIG_FEC_XCV_TYPE             RGMII
+#define FEC_QUIRK_ENET_MAC
+#define PHY_ANEG_TIMEOUT 20000
+
+/* ENET0 connects AR8031 on CPU board, ENET1 connects to base board */
+#define CONFIG_FEC_ENET_DEV 0
+
+#if (CONFIG_FEC_ENET_DEV == 0)
+#define IMX_FEC_BASE			0x5B040000
+#define CONFIG_FEC_MXC_PHYADDR          0x4
+#define CONFIG_ETHPRIME                 "eth0"
+#define CONFIG_FEC_MXC_MDIO_BASE	0x5B040000
+#elif (CONFIG_FEC_ENET_DEV == 1)
+#define IMX_FEC_BASE			0x5B050000
+#define CONFIG_FEC_MXC_PHYADDR          0x5
+#define CONFIG_ETHPRIME                 "eth1"
+#define CONFIG_FEC_MXC_MDIO_BASE	0x5B050000
+#endif
+
+#ifdef CONFIG_AHAB_BOOT
+#define AHAB_ENV "sec_boot=yes\0"
+#else
+#define AHAB_ENV "sec_boot=no\0"
+#endif
+
+/* Boot M4 */
+#define M4_BOOT_ENV \
+	"m4_0_image=m4_0.bin\0" \
+	"m4_1_image=m4_1.bin\0" \
+	"loadm4image_0=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${m4_0_image}\0" \
+	"loadm4image_1=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${m4_1_image}\0" \
+	"m4boot_0=run loadm4image_0; dcache flush; bootaux ${loadaddr} 0\0" \
+	"m4boot_1=run loadm4image_1; dcache flush; bootaux ${loadaddr} 1\0" \
+
+#define CONFIG_MFG_ENV_SETTINGS \
+	CONFIG_MFG_ENV_SETTINGS_DEFAULT \
+	"initrd_addr=0x83100000\0" \
+	"initrd_high=0xffffffffffffffff\0" \
+	"emmc_dev=0\0" \
+	"sd_dev=1\0" \
+
+/* Initial environment variables */
+#define CONFIG_EXTRA_ENV_SETTINGS		\
+	CONFIG_MFG_ENV_SETTINGS \
+	M4_BOOT_ENV \
+	AHAB_ENV \
+	"image=Image\0" \
+	"splashimage=0x9e000000\0" \
+	"panel=NULL\0" \
+	"ethaddr=00:01:02:03:04:05\0" \
+	"eth1addr=1A:2B:3C:4D:5E:6F\0" \
+	"console=ttyLP4\0" \
+	"fdt_addr=0x83000000\0"			\
+	"fdt_high=0xffffffffffffffff\0"		\
+	"cntr_addr=0x98000000\0"			\
+	"cntr_file=os_cntr_signed.bin\0" \
+	"boot_fdt=try\0" \
+	"disp=lcd\0" \
+	"fdt_file=imx8qm-iwg27s.dtb\0" \
+	"mmcpart=" __stringify(CONFIG_SYS_MMC_IMG_LOAD_PART) "\0" \
+	"mmcautodetect=no\0" \
+	"mmcargs=setenv bootargs console=${console},${baudrate} earlycon root=${mmcroot}\0 " \
+	"loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
+	"loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}\0" \
+	"hdp_addr=0x9c000000\0" \
+	"hdprx_addr=0x9c800000\0" \
+	"hdp_file=hdmitxfw.bin\0" \
+	"hdprx_file=hdmirxfw.bin\0" \
+	"loadhdp=fatload mmc ${mmcdev}:${mmcpart} ${hdp_addr} ${hdp_file}\0" \
+	"loadhdprx=fatload mmc ${mmcdev}:${mmcpart} ${hdprx_addr} ${hdprx_file}\0" \
+	"boot_os=booti ${loadaddr} - ${fdt_addr};\0" \
+	"loadcntr=fatload mmc ${mmcdev}:${mmcpart} ${cntr_addr} ${cntr_file}\0" \
+	"auth_os=auth_cntr ${cntr_addr}\0" \
+	"mmcboot=echo Booting from mmc ...; " \
+		"if run loadhdp; then; hdp load ${hdp_addr}; fi;" \
+		"if run loadhdprx; then; hdprx load ${hdprx_addr}; fi;" \
+		"run mmcargs; " \
+		"if test ${sec_boot} = yes; then " \
+			"if run auth_os; then " \
+				"run boot_os; " \
+			"else " \
+				"echo ERR: failed to authenticate; " \
+			"fi; " \
+		"else " \
+			"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+				"if run loadfdt; then " \
+					"run boot_os; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"else " \
+				"echo wait for boot; " \
+			"fi;" \
+		"fi;\0" \
+	"netargs=setenv bootargs console=${console},${baudrate} earlycon " \
+		"root=/dev/nfs " \
+		"ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp\0" \
+	"netboot=echo Booting from net ...; " \
+		"run netargs;  " \
+		"if test ${ip_dyn} = yes; then " \
+			"setenv get_cmd dhcp; " \
+		"else " \
+			"setenv get_cmd tftp; " \
+		"fi; " \
+		"if ${get_cmd} ${hdp_addr} ${hdp_file}; then; hdp load ${hdp_addr}; fi;" \
+		"if ${get_cmd} ${hdprx_addr} ${hdprx_file}; then; hdprx load ${hdprx_addr}; fi;" \
+		"if test ${sec_boot} = yes; then " \
+			"${get_cmd} ${cntr_addr} ${cntr_file}; " \
+			"if run auth_os; then " \
+				"run boot_os; " \
+			"else " \
+				"echo ERR: failed to authenticate; " \
+			"fi; " \
+		"else " \
+			"${get_cmd} ${loadaddr} ${image}; " \
+			"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+				"if ${get_cmd} ${fdt_addr} ${fdt_file}; then " \
+					"run boot_os; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"else " \
+				"booti; " \
+			"fi;" \
+		"fi;\0"
+
+#define CONFIG_BOOTCOMMAND \
+	   "mmc dev ${mmcdev}; if mmc rescan; then " \
+	   "if test ${sec_boot} = yes; then " \
+			"if run loadcntr; then " \
+				"run mmcboot; " \
+			"else run netboot; " \
+			"fi; " \
+		"else " \
+			"if run loadimage; then " \
+				"run mmcboot; " \
+			"else run netboot; " \
+			"fi; " \
+		"fi; " \
+	"else booti ${loadaddr} - ${fdt_addr}; fi"
+
+#define CONFIG_EXTRA_ENV_SETTINGS_EMMC \
+	CONFIG_EXTRA_ENV_SETTINGS \
+	"mmcdev=0\0" \
+        "mmcroot=/dev/mmcblk0p2 rootwait rw\0" \
+
+#define CONFIG_EXTRA_ENV_SETTINGS_SSD \
+	CONFIG_EXTRA_ENV_SETTINGS \
+	"mmcdev=1\0" \
+	"mmcroot=/dev/mmcblk1p2 rootwait rw\0" \
+
+#define CONFIG_EXTRA_ENV_SETTINGS_MSD \
+	CONFIG_EXTRA_ENV_SETTINGS \
+	"mmcdev=2\0" \
+	"mmcroot=/dev/mmcblk2p2 rootwait rw\0" \
+
+/* Link Definitions */
+#define CONFIG_LOADADDR			0x80280000
+
+#define CONFIG_SYS_LOAD_ADDR           CONFIG_LOADADDR
+
+#define CONFIG_SYS_INIT_SP_ADDR         0x80200000
+
+
+#ifdef CONFIG_QSPI_BOOT
+#define CONFIG_ENV_SECT_SIZE	(128 * 1024)
+#define CONFIG_ENV_SPI_BUS	CONFIG_SF_DEFAULT_BUS
+#define CONFIG_ENV_SPI_CS	CONFIG_SF_DEFAULT_CS
+#define CONFIG_ENV_SPI_MODE	CONFIG_SF_DEFAULT_MODE
+#define CONFIG_ENV_SPI_MAX_HZ	CONFIG_SF_DEFAULT_SPEED
+#else
+#define CONFIG_SYS_MMC_ENV_PART		0	/* user area */
+#endif
+
+#define CONFIG_SYS_MMC_IMG_LOAD_PART	1
+
+#define CONFIG_SYS_MMC_ENV_DEV		0   /* USDHC1 */
+#define CONFIG_SYS_FSL_USDHC_NUM	3
+
+/* Size of malloc() pool */
+#define CONFIG_SYS_MALLOC_LEN		((CONFIG_ENV_SIZE + (32 * 1024)) * 1024)
+
+#define CONFIG_SYS_SDRAM_BASE		0x80000000
+#define PHYS_SDRAM_1			0x80000000
+#define PHYS_SDRAM_2			0x880000000
+#define PHYS_SDRAM_1_SIZE		0x80000000	/* 2 GB */
+#if defined(CONFIG_SDRAM_SIZE_4GB)
+#define PHYS_SDRAM_2_SIZE		0x80000000	/* 2 GB */
+#elif defined(CONFIG_SDRAM_SIZE_8GB)
+#define PHYS_SDRAM_2_SIZE		0x180000000	/* 6 GB */
+#endif
+
+#define CONFIG_SYS_MEMTEST_START    0xA0000000
+#define CONFIG_SYS_MEMTEST_END      (CONFIG_SYS_MEMTEST_START + (PHYS_SDRAM_1_SIZE >> 2))
+
+/* Serial */
+#ifdef CONFIG_SYS_PROMPT
+#undef CONFIG_SYS_PROMPT
+#endif
+#define CONFIG_SYS_PROMPT              "iWave-G27 > "
+
+#define CONFIG_BAUDRATE			115200
+
+/* Monitor Command Prompt */
+#define CONFIG_SYS_PROMPT_HUSH_PS2     "> "
+#define CONFIG_SYS_CBSIZE              2048
+#define CONFIG_SYS_MAXARGS             64
+#define CONFIG_SYS_BARGSIZE CONFIG_SYS_CBSIZE
+#define CONFIG_SYS_PBSIZE		(CONFIG_SYS_CBSIZE + \
+					sizeof(CONFIG_SYS_PROMPT) + 16)
+
+/* Generic Timer Definitions */
+#define COUNTER_FREQUENCY		8000000	/* 8MHz */
+
+/* MT35XU512ABA1G12 has only one Die, so QSPI0 B won't work */
+#ifdef CONFIG_FSL_FSPI
+#define FSL_FSPI_FLASH_SIZE		SZ_64M
+#define FSL_FSPI_FLASH_NUM		1
+#define FSPI0_BASE_ADDR			0x5d120000
+#define FSPI0_AMBA_BASE			0
+#define CONFIG_SYS_FSL_FSPI_AHB
+#endif
+
+#define CONFIG_SERIAL_TAG
+
+/* USB Config */
+#ifndef CONFIG_SPL_BUILD
+#define CONFIG_CMD_USB
+#define CONFIG_USB_STORAGE
+#define CONFIG_USBD_HS
+
+#define CONFIG_CMD_USB_MASS_STORAGE
+#define CONFIG_USB_GADGET_MASS_STORAGE
+#define CONFIG_USB_FUNCTION_MASS_STORAGE
+
+#endif
+
+#define CONFIG_USB_MAX_CONTROLLER_COUNT 2
+
+/* USB OTG controller configs */
+#ifdef CONFIG_USB_EHCI_HCD
+#define CONFIG_USB_HOST_ETHER
+#define CONFIG_USB_ETHER_ASIX
+#define CONFIG_MXC_USB_PORTSC		(PORT_PTS_UTMI | PORT_PTS_PTW)
+#endif
+
+#ifdef CONFIG_DM_VIDEO
+#define CONFIG_VIDEO_LOGO
+#define CONFIG_SPLASH_SCREEN
+#define CONFIG_SPLASH_SCREEN_ALIGN
+#define CONFIG_CMD_BMP
+#define CONFIG_BMP_16BPP
+#define CONFIG_BMP_24BPP
+#define CONFIG_BMP_32BPP
+#define CONFIG_VIDEO_BMP_RLE8
+#define CONFIG_VIDEO_BMP_LOGO
+#endif
+
+#if defined(CONFIG_TARGET_IMX8QM_IWG27S_UUU)
+#include "imx8qm_iwg27s_uuu.h"
+#endif
+
+#endif /* __IMX8QM_IWG27S_H */
diff -Naur A/include/configs/imx8qm_iwg27s_uuu.h B/include/configs/imx8qm_iwg27s_uuu.h
--- A/include/configs/imx8qm_iwg27s_uuu.h	1970-01-01 05:30:00.000000000 +0530
+++ B/include/configs/imx8qm_iwg27s_uuu.h	2020-09-16 17:49:01.009141035 +0530
@@ -0,0 +1,18 @@
+/*
+ * Copyright (C) 2020 iWave System Technologies Pvt Ltd.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __IMX8QM_IWG27S_UUU_H
+#define __IMX8QM_IWG27S_UUU_H
+
+#include "imx8qm_iwg27s.h"
+
+#ifdef BSP_VERSION
+#undef BSP_VERSION
+#define BSP_VERSION	"iW-PRGEE-SC-01-R2.0-REL0.1-Linux5.4.24_UUU"
+#endif
+
+#endif
+
diff -Naur A/include/dt-bindings/soc/imx8_pd.h B/include/dt-bindings/soc/imx8_pd.h
--- A/include/dt-bindings/soc/imx8_pd.h	2020-09-16 12:59:36.090567940 +0530
+++ B/include/dt-bindings/soc/imx8_pd.h	2020-09-16 17:49:01.077142373 +0530
@@ -207,4 +207,9 @@
 #define PD_CAAM_JR2                 caam_job_ring2
 #define PD_CAAM_JR3                 caam_job_ring3
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+/* IWG27S: LPUART4: Adding LPUART4 Power Domain Support */
+#define	PD_UART4_TX                 dma0_chan21
+#endif
+
 #endif /* __DT_BINDINGS_IMX8_PD_H */
diff -Naur A/include/env_default.h B/include/env_default.h
--- A/include/env_default.h	2020-09-16 12:59:36.094568041 +0530
+++ B/include/env_default.h	2020-09-16 17:49:00.865138202 +0530
@@ -9,12 +9,531 @@
 
 #include <env_callback.h>
 
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
 #ifdef DEFAULT_ENV_INSTANCE_EMBEDDED
 env_t embedded_environment __UBOOT_ENV_SECTION__(environment) = {
 	ENV_CRC,	/* CRC Sum */
 #ifdef CONFIG_SYS_REDUNDAND_ENVIRONMENT
 	1,		/* Flags: valid */
 #endif
+{
+#ifdef	CONFIG_ENV_CALLBACK_LIST_DEFAULT
+	ENV_CALLBACK_VAR "=" CONFIG_ENV_CALLBACK_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_ENV_FLAGS_LIST_DEFAULT
+	ENV_FLAGS_VAR "=" CONFIG_ENV_FLAGS_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_USE_BOOTARGS
+	"bootargs="	CONFIG_BOOTARGS			"\0"
+#endif
+#ifdef	CONFIG_BOOTCOMMAND
+	"bootcmd="	CONFIG_BOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_RAMBOOTCOMMAND
+	"ramboot="	CONFIG_RAMBOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_NFSBOOTCOMMAND
+	"nfsboot="	CONFIG_NFSBOOTCOMMAND		"\0"
+#endif
+#if defined(CONFIG_BOOTDELAY)
+	"bootdelay="	__stringify(CONFIG_BOOTDELAY)	"\0"
+#endif
+#if defined(CONFIG_BAUDRATE) && (CONFIG_BAUDRATE >= 0)
+	"baudrate="	__stringify(CONFIG_BAUDRATE)	"\0"
+#endif
+#ifdef	CONFIG_LOADS_ECHO
+	"loads_echo="	__stringify(CONFIG_LOADS_ECHO)	"\0"
+#endif
+#ifdef	CONFIG_ETHADDR
+	"ethaddr="	__stringify(CONFIG_ETHADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETH1ADDR
+	"eth1addr="	__stringify(CONFIG_ETH1ADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETHPRIME
+	"ethprime="	CONFIG_ETHPRIME			"\0"
+#endif
+#ifdef	CONFIG_IPADDR
+	"ipaddr="	__stringify(CONFIG_IPADDR)	"\0"
+#endif
+#ifdef	CONFIG_SERVERIP
+	"serverip="	__stringify(CONFIG_SERVERIP)	"\0"
+#endif
+#ifdef	CONFIG_SYS_AUTOLOAD
+	"autoload="	CONFIG_SYS_AUTOLOAD		"\0"
+#endif
+#ifdef	CONFIG_PREBOOT
+	"preboot="	CONFIG_PREBOOT			"\0"
+#endif
+#ifdef	CONFIG_ROOTPATH
+	"rootpath="	CONFIG_ROOTPATH			"\0"
+#endif
+#ifdef	CONFIG_GATEWAYIP
+	"gatewayip="	__stringify(CONFIG_GATEWAYIP)	"\0"
+#endif
+#ifdef	CONFIG_NETMASK
+	"netmask="	__stringify(CONFIG_NETMASK)	"\0"
+#endif
+#ifdef	CONFIG_HOSTNAME
+	"hostname="	CONFIG_HOSTNAME	"\0"
+#endif
+#ifdef	CONFIG_BOOTFILE
+	"bootfile="	CONFIG_BOOTFILE			"\0"
+#endif
+#ifdef	CONFIG_LOADADDR
+	"loadaddr="	__stringify(CONFIG_LOADADDR)	"\0"
+#endif
+#ifdef	CONFIG_CLOCKS_IN_MHZ
+	"clocks_in_mhz=1\0"
+#endif
+#if defined(CONFIG_PCI_BOOTDELAY) && (CONFIG_PCI_BOOTDELAY > 0)
+	"pcidelay="	__stringify(CONFIG_PCI_BOOTDELAY)"\0"
+#endif
+#ifdef	CONFIG_ENV_VARS_UBOOT_CONFIG
+	"arch="		CONFIG_SYS_ARCH			"\0"
+#ifdef CONFIG_SYS_CPU
+	"cpu="		CONFIG_SYS_CPU			"\0"
+#endif
+#ifdef CONFIG_SYS_BOARD
+	"board="	CONFIG_SYS_BOARD		"\0"
+	"board_name="	CONFIG_SYS_BOARD		"\0"
+#endif
+#ifdef CONFIG_SYS_VENDOR
+	"vendor="	CONFIG_SYS_VENDOR		"\0"
+#endif
+#ifdef CONFIG_SYS_SOC
+	"soc="		CONFIG_SYS_SOC			"\0"
+#endif
+#endif
+#if defined(CONFIG_BOOTCOUNT_BOOTLIMIT) && (CONFIG_BOOTCOUNT_BOOTLIMIT > 0)
+        "bootlimit="    __stringify(CONFIG_BOOTCOUNT_BOOTLIMIT)"\0"
+#endif
+#ifdef	CONFIG_EXTRA_ENV_SETTINGS
+	CONFIG_EXTRA_ENV_SETTINGS
+#endif
+	"\0"
+    }
+};
+
+#else
+
+#if defined(DEFAULT_ENV_INSTANCE_STATIC)
+static char default_environment_emmc[] = {
+#else
+const uchar default_environment_emmc[] = {
+#endif
+#ifdef	CONFIG_ENV_CALLBACK_LIST_DEFAULT
+	ENV_CALLBACK_VAR "=" CONFIG_ENV_CALLBACK_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_ENV_FLAGS_LIST_DEFAULT
+	ENV_FLAGS_VAR "=" CONFIG_ENV_FLAGS_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_USE_BOOTARGS
+	"bootargs="	CONFIG_BOOTARGS			"\0"
+#endif
+#ifdef	CONFIG_BOOTCOMMAND
+	"bootcmd="	CONFIG_BOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_RAMBOOTCOMMAND
+	"ramboot="	CONFIG_RAMBOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_NFSBOOTCOMMAND
+	"nfsboot="	CONFIG_NFSBOOTCOMMAND		"\0"
+#endif
+#if defined(CONFIG_BOOTDELAY)
+	"bootdelay="	__stringify(CONFIG_BOOTDELAY)	"\0"
+#endif
+#if defined(CONFIG_BAUDRATE) && (CONFIG_BAUDRATE >= 0)
+	"baudrate="	__stringify(CONFIG_BAUDRATE)	"\0"
+#endif
+#ifdef	CONFIG_LOADS_ECHO
+	"loads_echo="	__stringify(CONFIG_LOADS_ECHO)	"\0"
+#endif
+#ifdef	CONFIG_ETHADDR
+	"ethaddr="	__stringify(CONFIG_ETHADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETH1ADDR
+	"eth1addr="	__stringify(CONFIG_ETH1ADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETHPRIME
+	"ethprime="	CONFIG_ETHPRIME			"\0"
+#endif
+#ifdef	CONFIG_IPADDR
+	"ipaddr="	__stringify(CONFIG_IPADDR)	"\0"
+#endif
+#ifdef	CONFIG_SERVERIP
+	"serverip="	__stringify(CONFIG_SERVERIP)	"\0"
+#endif
+#ifdef	CONFIG_SYS_AUTOLOAD
+	"autoload="	CONFIG_SYS_AUTOLOAD		"\0"
+#endif
+#ifdef	CONFIG_PREBOOT
+	"preboot="	CONFIG_PREBOOT			"\0"
+#endif
+#ifdef	CONFIG_ROOTPATH
+	"rootpath="	CONFIG_ROOTPATH			"\0"
+#endif
+#ifdef	CONFIG_GATEWAYIP
+	"gatewayip="	__stringify(CONFIG_GATEWAYIP)	"\0"
+#endif
+#ifdef	CONFIG_NETMASK
+	"netmask="	__stringify(CONFIG_NETMASK)	"\0"
+#endif
+#ifdef	CONFIG_HOSTNAME
+	"hostname="	CONFIG_HOSTNAME	"\0"
+#endif
+#ifdef	CONFIG_BOOTFILE
+	"bootfile="	CONFIG_BOOTFILE			"\0"
+#endif
+#ifdef	CONFIG_LOADADDR
+	"loadaddr="	__stringify(CONFIG_LOADADDR)	"\0"
+#endif
+#ifdef	CONFIG_CLOCKS_IN_MHZ
+	"clocks_in_mhz=1\0"
+#endif
+#if defined(CONFIG_PCI_BOOTDELAY) && (CONFIG_PCI_BOOTDELAY > 0)
+	"pcidelay="	__stringify(CONFIG_PCI_BOOTDELAY)"\0"
+#endif
+#ifdef	CONFIG_ENV_VARS_UBOOT_CONFIG
+	"arch="		CONFIG_SYS_ARCH			"\0"
+#ifdef CONFIG_SYS_CPU
+	"cpu="		CONFIG_SYS_CPU			"\0"
+#endif
+#ifdef CONFIG_SYS_BOARD
+	"board="	CONFIG_SYS_BOARD		"\0"
+	"board_name="	CONFIG_SYS_BOARD		"\0"
+#endif
+#ifdef CONFIG_SYS_VENDOR
+	"vendor="	CONFIG_SYS_VENDOR		"\0"
+#endif
+#ifdef CONFIG_SYS_SOC
+	"soc="		CONFIG_SYS_SOC			"\0"
+#endif
+#endif
+#if defined(CONFIG_BOOTCOUNT_BOOTLIMIT) && (CONFIG_BOOTCOUNT_BOOTLIMIT > 0)
+        "bootlimit="    __stringify(CONFIG_BOOTCOUNT_BOOTLIMIT)"\0"
+#endif
+#ifdef	CONFIG_EXTRA_ENV_SETTINGS
+	CONFIG_EXTRA_ENV_SETTINGS_EMMC
+#endif
+	"\0"
+};
+
+#if defined(DEFAULT_ENV_INSTANCE_STATIC)
+static char default_environment_ssd[] = {
+#else
+const uchar default_environment_ssd[] = {
+#endif
+#ifdef	CONFIG_ENV_CALLBACK_LIST_DEFAULT
+	ENV_CALLBACK_VAR "=" CONFIG_ENV_CALLBACK_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_ENV_FLAGS_LIST_DEFAULT
+	ENV_FLAGS_VAR "=" CONFIG_ENV_FLAGS_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_USE_BOOTARGS
+	"bootargs="	CONFIG_BOOTARGS			"\0"
+#endif
+#ifdef	CONFIG_BOOTCOMMAND
+	"bootcmd="	CONFIG_BOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_RAMBOOTCOMMAND
+	"ramboot="	CONFIG_RAMBOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_NFSBOOTCOMMAND
+	"nfsboot="	CONFIG_NFSBOOTCOMMAND		"\0"
+#endif
+#if defined(CONFIG_BOOTDELAY)
+	"bootdelay="	__stringify(CONFIG_BOOTDELAY)	"\0"
+#endif
+#if defined(CONFIG_BAUDRATE) && (CONFIG_BAUDRATE >= 0)
+	"baudrate="	__stringify(CONFIG_BAUDRATE)	"\0"
+#endif
+#ifdef	CONFIG_LOADS_ECHO
+	"loads_echo="	__stringify(CONFIG_LOADS_ECHO)	"\0"
+#endif
+#ifdef	CONFIG_ETHADDR
+	"ethaddr="	__stringify(CONFIG_ETHADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETH1ADDR
+	"eth1addr="	__stringify(CONFIG_ETH1ADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETHPRIME
+	"ethprime="	CONFIG_ETHPRIME			"\0"
+#endif
+#ifdef	CONFIG_IPADDR
+	"ipaddr="	__stringify(CONFIG_IPADDR)	"\0"
+#endif
+#ifdef	CONFIG_SERVERIP
+	"serverip="	__stringify(CONFIG_SERVERIP)	"\0"
+#endif
+#ifdef	CONFIG_SYS_AUTOLOAD
+	"autoload="	CONFIG_SYS_AUTOLOAD		"\0"
+#endif
+#ifdef	CONFIG_PREBOOT
+	"preboot="	CONFIG_PREBOOT			"\0"
+#endif
+#ifdef	CONFIG_ROOTPATH
+	"rootpath="	CONFIG_ROOTPATH			"\0"
+#endif
+#ifdef	CONFIG_GATEWAYIP
+	"gatewayip="	__stringify(CONFIG_GATEWAYIP)	"\0"
+#endif
+#ifdef	CONFIG_NETMASK
+	"netmask="	__stringify(CONFIG_NETMASK)	"\0"
+#endif
+#ifdef	CONFIG_HOSTNAME
+	"hostname="	CONFIG_HOSTNAME	"\0"
+#endif
+#ifdef	CONFIG_BOOTFILE
+	"bootfile="	CONFIG_BOOTFILE			"\0"
+#endif
+#ifdef	CONFIG_LOADADDR
+	"loadaddr="	__stringify(CONFIG_LOADADDR)	"\0"
+#endif
+#ifdef	CONFIG_CLOCKS_IN_MHZ
+	"clocks_in_mhz=1\0"
+#endif
+#if defined(CONFIG_PCI_BOOTDELAY) && (CONFIG_PCI_BOOTDELAY > 0)
+	"pcidelay="	__stringify(CONFIG_PCI_BOOTDELAY)"\0"
+#endif
+#ifdef	CONFIG_ENV_VARS_UBOOT_CONFIG
+	"arch="		CONFIG_SYS_ARCH			"\0"
+#ifdef CONFIG_SYS_CPU
+	"cpu="		CONFIG_SYS_CPU			"\0"
+#endif
+#ifdef CONFIG_SYS_BOARD
+	"board="	CONFIG_SYS_BOARD		"\0"
+	"board_name="	CONFIG_SYS_BOARD		"\0"
+#endif
+#ifdef CONFIG_SYS_VENDOR
+	"vendor="	CONFIG_SYS_VENDOR		"\0"
+#endif
+#ifdef CONFIG_SYS_SOC
+	"soc="		CONFIG_SYS_SOC			"\0"
+#endif
+#endif
+#if defined(CONFIG_BOOTCOUNT_BOOTLIMIT) && (CONFIG_BOOTCOUNT_BOOTLIMIT > 0)
+        "bootlimit="    __stringify(CONFIG_BOOTCOUNT_BOOTLIMIT)"\0"
+#endif
+#ifdef	CONFIG_EXTRA_ENV_SETTINGS
+	CONFIG_EXTRA_ENV_SETTINGS_SSD
+#endif
+	"\0"
+};
+
+#if defined(DEFAULT_ENV_INSTANCE_STATIC)
+static char default_environment_msd[] = {
+#else
+const uchar default_environment_msd[] = {
+#endif
+#ifdef	CONFIG_ENV_CALLBACK_LIST_DEFAULT
+	ENV_CALLBACK_VAR "=" CONFIG_ENV_CALLBACK_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_ENV_FLAGS_LIST_DEFAULT
+	ENV_FLAGS_VAR "=" CONFIG_ENV_FLAGS_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_USE_BOOTARGS
+	"bootargs="	CONFIG_BOOTARGS			"\0"
+#endif
+#ifdef	CONFIG_BOOTCOMMAND
+	"bootcmd="	CONFIG_BOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_RAMBOOTCOMMAND
+	"ramboot="	CONFIG_RAMBOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_NFSBOOTCOMMAND
+	"nfsboot="	CONFIG_NFSBOOTCOMMAND		"\0"
+#endif
+#if defined(CONFIG_BOOTDELAY)
+	"bootdelay="	__stringify(CONFIG_BOOTDELAY)	"\0"
+#endif
+#if defined(CONFIG_BAUDRATE) && (CONFIG_BAUDRATE >= 0)
+	"baudrate="	__stringify(CONFIG_BAUDRATE)	"\0"
+#endif
+#ifdef	CONFIG_LOADS_ECHO
+	"loads_echo="	__stringify(CONFIG_LOADS_ECHO)	"\0"
+#endif
+#ifdef	CONFIG_ETHADDR
+	"ethaddr="	__stringify(CONFIG_ETHADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETH1ADDR
+	"eth1addr="	__stringify(CONFIG_ETH1ADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETHPRIME
+	"ethprime="	CONFIG_ETHPRIME			"\0"
+#endif
+#ifdef	CONFIG_IPADDR
+	"ipaddr="	__stringify(CONFIG_IPADDR)	"\0"
+#endif
+#ifdef	CONFIG_SERVERIP
+	"serverip="	__stringify(CONFIG_SERVERIP)	"\0"
+#endif
+#ifdef	CONFIG_SYS_AUTOLOAD
+	"autoload="	CONFIG_SYS_AUTOLOAD		"\0"
+#endif
+#ifdef	CONFIG_PREBOOT
+	"preboot="	CONFIG_PREBOOT			"\0"
+#endif
+#ifdef	CONFIG_ROOTPATH
+	"rootpath="	CONFIG_ROOTPATH			"\0"
+#endif
+#ifdef	CONFIG_GATEWAYIP
+	"gatewayip="	__stringify(CONFIG_GATEWAYIP)	"\0"
+#endif
+#ifdef	CONFIG_NETMASK
+	"netmask="	__stringify(CONFIG_NETMASK)	"\0"
+#endif
+#ifdef	CONFIG_HOSTNAME
+	"hostname="	CONFIG_HOSTNAME	"\0"
+#endif
+#ifdef	CONFIG_BOOTFILE
+	"bootfile="	CONFIG_BOOTFILE			"\0"
+#endif
+#ifdef	CONFIG_LOADADDR
+	"loadaddr="	__stringify(CONFIG_LOADADDR)	"\0"
+#endif
+#ifdef	CONFIG_CLOCKS_IN_MHZ
+	"clocks_in_mhz=1\0"
+#endif
+#if defined(CONFIG_PCI_BOOTDELAY) && (CONFIG_PCI_BOOTDELAY > 0)
+	"pcidelay="	__stringify(CONFIG_PCI_BOOTDELAY)"\0"
+#endif
+#ifdef	CONFIG_ENV_VARS_UBOOT_CONFIG
+	"arch="		CONFIG_SYS_ARCH			"\0"
+#ifdef CONFIG_SYS_CPU
+	"cpu="		CONFIG_SYS_CPU			"\0"
+#endif
+#ifdef CONFIG_SYS_BOARD
+	"board="	CONFIG_SYS_BOARD		"\0"
+	"board_name="	CONFIG_SYS_BOARD		"\0"
+#endif
+#ifdef CONFIG_SYS_VENDOR
+	"vendor="	CONFIG_SYS_VENDOR		"\0"
+#endif
+#ifdef CONFIG_SYS_SOC
+	"soc="		CONFIG_SYS_SOC			"\0"
+#endif
+#endif
+#if defined(CONFIG_BOOTCOUNT_BOOTLIMIT) && (CONFIG_BOOTCOUNT_BOOTLIMIT > 0)
+        "bootlimit="    __stringify(CONFIG_BOOTCOUNT_BOOTLIMIT)"\0"
+#endif
+#ifdef	CONFIG_EXTRA_ENV_SETTINGS
+	CONFIG_EXTRA_ENV_SETTINGS_MSD
+#endif
+	"\0"
+};
+
+#if defined(DEFAULT_ENV_INSTANCE_STATIC)
+static char default_environment[] = {
+#else
+const uchar default_environment[] = {
+#endif
+#ifdef	CONFIG_ENV_CALLBACK_LIST_DEFAULT
+	ENV_CALLBACK_VAR "=" CONFIG_ENV_CALLBACK_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_ENV_FLAGS_LIST_DEFAULT
+	ENV_FLAGS_VAR "=" CONFIG_ENV_FLAGS_LIST_DEFAULT "\0"
+#endif
+#ifdef	CONFIG_USE_BOOTARGS
+	"bootargs="	CONFIG_BOOTARGS			"\0"
+#endif
+#ifdef	CONFIG_BOOTCOMMAND
+	"bootcmd="	CONFIG_BOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_RAMBOOTCOMMAND
+	"ramboot="	CONFIG_RAMBOOTCOMMAND		"\0"
+#endif
+#ifdef	CONFIG_NFSBOOTCOMMAND
+	"nfsboot="	CONFIG_NFSBOOTCOMMAND		"\0"
+#endif
+#if defined(CONFIG_BOOTDELAY)
+	"bootdelay="	__stringify(CONFIG_BOOTDELAY)	"\0"
+#endif
+#if defined(CONFIG_BAUDRATE) && (CONFIG_BAUDRATE >= 0)
+	"baudrate="	__stringify(CONFIG_BAUDRATE)	"\0"
+#endif
+#ifdef	CONFIG_LOADS_ECHO
+	"loads_echo="	__stringify(CONFIG_LOADS_ECHO)	"\0"
+#endif
+#ifdef	CONFIG_ETHADDR
+	"ethaddr="	__stringify(CONFIG_ETHADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETH1ADDR
+	"eth1addr="	__stringify(CONFIG_ETH1ADDR)	"\0"
+#endif
+#ifdef	CONFIG_ETHPRIME
+	"ethprime="	CONFIG_ETHPRIME			"\0"
+#endif
+#ifdef	CONFIG_IPADDR
+	"ipaddr="	__stringify(CONFIG_IPADDR)	"\0"
+#endif
+#ifdef	CONFIG_SERVERIP
+	"serverip="	__stringify(CONFIG_SERVERIP)	"\0"
+#endif
+#ifdef	CONFIG_SYS_AUTOLOAD
+	"autoload="	CONFIG_SYS_AUTOLOAD		"\0"
+#endif
+#ifdef	CONFIG_PREBOOT
+	"preboot="	CONFIG_PREBOOT			"\0"
+#endif
+#ifdef	CONFIG_ROOTPATH
+	"rootpath="	CONFIG_ROOTPATH			"\0"
+#endif
+#ifdef	CONFIG_GATEWAYIP
+	"gatewayip="	__stringify(CONFIG_GATEWAYIP)	"\0"
+#endif
+#ifdef	CONFIG_NETMASK
+	"netmask="	__stringify(CONFIG_NETMASK)	"\0"
+#endif
+#ifdef	CONFIG_HOSTNAME
+	"hostname="	CONFIG_HOSTNAME	"\0"
+#endif
+#ifdef	CONFIG_BOOTFILE
+	"bootfile="	CONFIG_BOOTFILE			"\0"
+#endif
+#ifdef	CONFIG_LOADADDR
+	"loadaddr="	__stringify(CONFIG_LOADADDR)	"\0"
+#endif
+#ifdef	CONFIG_CLOCKS_IN_MHZ
+	"clocks_in_mhz=1\0"
+#endif
+#if defined(CONFIG_PCI_BOOTDELAY) && (CONFIG_PCI_BOOTDELAY > 0)
+	"pcidelay="	__stringify(CONFIG_PCI_BOOTDELAY)"\0"
+#endif
+#ifdef	CONFIG_ENV_VARS_UBOOT_CONFIG
+	"arch="		CONFIG_SYS_ARCH			"\0"
+#ifdef CONFIG_SYS_CPU
+	"cpu="		CONFIG_SYS_CPU			"\0"
+#endif
+#ifdef CONFIG_SYS_BOARD
+	"board="	CONFIG_SYS_BOARD		"\0"
+	"board_name="	CONFIG_SYS_BOARD		"\0"
+#endif
+#ifdef CONFIG_SYS_VENDOR
+	"vendor="	CONFIG_SYS_VENDOR		"\0"
+#endif
+#ifdef CONFIG_SYS_SOC
+	"soc="		CONFIG_SYS_SOC			"\0"
+#endif
+#endif
+#if defined(CONFIG_BOOTCOUNT_BOOTLIMIT) && (CONFIG_BOOTCOUNT_BOOTLIMIT > 0)
+        "bootlimit="    __stringify(CONFIG_BOOTCOUNT_BOOTLIMIT)"\0"
+#endif
+#ifdef	CONFIG_EXTRA_ENV_SETTINGS
+	CONFIG_EXTRA_ENV_SETTINGS
+#endif
+	"\0"
+};
+#endif
+
+#else
+
+#ifdef DEFAULT_ENV_INSTANCE_EMBEDDED
+env_t embedded_environment __PPCENV__ = {
+	ENV_CRC,	/* CRC Sum */
+#ifdef CONFIG_SYS_REDUNDAND_ENVIRONMENT
+	1,		/* Flags: valid */
+#endif
 	{
 #elif defined(DEFAULT_ENV_INSTANCE_STATIC)
 static char default_environment[] = {
@@ -118,3 +637,4 @@
 	}
 #endif
 };
+#endif
diff -Naur A/include/env_internal.h B/include/env_internal.h
--- A/include/env_internal.h	2020-09-16 12:59:36.094568041 +0530
+++ B/include/env_internal.h	2020-09-16 17:49:00.865138202 +0530
@@ -112,6 +112,12 @@
 #endif /* ENV_IS_EMBEDDED */
 
 extern const unsigned char default_environment[];
+#ifdef CONFIG_TARGET_IMX8QM_IWG27S
+/* IWG27S: Declare default environment for boot device */
+extern const unsigned char default_environment_ssd[];
+extern const unsigned char default_environment_msd[];
+extern const unsigned char default_environment_emmc[];
+#endif
 
 #ifndef DO_DEPS_ONLY
 
diff -Naur A/scripts/config_whitelist.txt B/scripts/config_whitelist.txt
--- A/scripts/config_whitelist.txt	2020-09-16 12:59:36.214571037 +0530
+++ B/scripts/config_whitelist.txt	2020-09-16 17:49:01.317147095 +0530
@@ -496,6 +496,9 @@
 CONFIG_EXTRA_ENV_KS2_BOARD_SETTINGS
 CONFIG_EXTRA_ENV_SETTINGS
 CONFIG_EXTRA_ENV_SETTINGS_COMMON
+CONFIG_EXTRA_ENV_SETTINGS_EMMC
+CONFIG_EXTRA_ENV_SETTINGS_MSD
+CONFIG_EXTRA_ENV_SETTINGS_SSD
 CONFIG_EXTRA_ENV_UNLOCK
 CONFIG_EXTRA_ENV_USBTTY
 CONFIG_EXT_AHB2AHB_BASE
